Cap´
ıtulo 1

Al Ser un Sistema Centralizado, se puede acceder al el desde cualquier navegador web actual que
cuente con conexi´n a Internet, lo que permite entre otras cosas:
o
Disminuir los tiempos de esperas por parte de pacientes a la hora de solicitar ser atendidos, solo
necesita solicitar un turno v´ web el sistema autom´ticamente le asignara una fecha y hora acorde
ıa
a
a sus requerimientos. Permite a los m´dicos manejar mas f´cilmente su agenda para atenci´n de
e
a
o
pacientes.
Mejorar el Seguimiento de los Pacientes por parte de los m´dicos, centralizando toda su informaci´n
e
o
ya que con ello el m´dico puede monitoria la evoluci´n de su paciente donde sea que se encuentre
e
o
ya que solo necesitara una PC con conexi´n a Internet.
o

1.3.

Organizacion del Informe

El informe esta organizado en 6 capitulos, entre los que se incluye esta rese˜a que corresponde al
n
Capitulo I que es una introduccion la cual explica las necesidades que motivaron el desarrollo del
mismo y un resumen general de lo que se pretende implementar con el mismo.
En el Capitulo II se reﬁere en cuanto a la tecnologia y razones por las cuales se decidio utilizar.
El Capitulo III trata sobre las etapas del desarrollo del mismo y las diferentes metas alcansadas.
El Capitulo IV Esplica la problematica y el funcionamiento de los actuales sistemas aplicados al
area.
El Capitulo V habla sobre cuestiones tecnicas relacionadas con el desarrollo, los modulos y
funcionalidades que fueron necesarios implementar, y las soluciones que se plantearon.
El Capitulo VI no guia en la implementacion del sistema, los requerimientos del mismos y toda la
conﬁguracion necesaria para lograr una correcta instalacion y funcionamiento del mismo.
En el Capitulo VII pongo una sencilla visita y explicacion de las diferentes areas del sistema.
Por ultimo el Capitulo VIII es una conclucion, que analiza el desarrollo del mismo, perspectivas a
futuro y como podria evolucionar el sistema.

2

Cap´
ıtulo 2

Elecci´n de la Tecnolog´
o
ıa
2.1.

¿Por que Web y no Desktop?

Una aplicacion Desktop (tambien llamada de Escritorio) es aquella que requiere ser instalada en
el Ordenador (PC) del Usuario, y que es ejecutada directamente por el sistema operativo, ya sea
Microsoft Windows, GNU/Linux, Mac OS, etc.
Algunos Ejemplos de Estas Aplicaciones:
Winamp
Adobe Photoshop
iTunes
Microsoft Oﬁcce (Word, Excel, Power Point. etc)
Aunque suelen ser mas robustas y estables que las aplicaciones Web Presentan varios inconvenientes
tales como:
Su acceso solo se limita al ordenandor donde fue instalada.
La Aplicacion es dependiente del Sistema Operativo que utilice el ordenador, aunque existen
programas Multiplataforma no aseguran una compatibilidad completa.
Requieren una instalacion personalizada
En caso de Actualizaciones requieren que estas se hagan de forma manual en cada ordenador
donde se instalo la Aplicacion.
Suelen Tener requerimientos especiales de Software y librerias para poder funcionar.
Una aplicacion Web, es aquella que solo requiere ser instalada en un Servidor, su ejecucion requiere
unicamente Disponer de un ordenador con conex´ a internet y un navegador en contraparte de
ıon
las Desktop que requiere que se instale en cada ordenador donde se pretende usar.
Por lo cual brinda una serie de ventajas tales como:
Portabilidad, se ejecuta desde cualquier ordenador que posea coneccion a internet sin depender
de Software adicional, Plataforma y/o Sistema Operativo.
La informacion que se maneja es multiusuario por lo que son especialmente utiles para desarrollar aplicaciones multiusuarios basadas en compartir informacion.
3

Cap´
ıtulo 2
Consumen muy pocos recursos, por lo que el usuario no necesita tener un ordenador con
grandes prestaciones para trabajar con ellas.
Son faciles de Actualizar y mantener.
Se pueden utilizar en miles de equipos sin limitacion y restriccion alguna.
Su funcionalidad es independiente del Sistema Operativo Instalado en el ordenador del usuario.
No hay problemas de incompatibilidad de Version de software ya que los usuarios trabajan
con la misma version.
En resumen el Sistema por sus caracteristicas podria haberse implementado como un sistema Deskop
pero se ubiesen perdido las caracteristicas deseadas del mismo.

2.2.

Apache

El servidor HTTP Apache es un servidor web HTTP de c´digo abierto, para plataformas Unix
o
(BSD, GNU/Linux, etc.), Microsoft Windows, Macintosh y otras, que implementa el protocolo
HTTP/1.12 y la noci´n de sitio virtual. Cuando comenz´ su desarrollo en 1995 se bas´ inicialmente
o
a
a
en c´digo del popular NCSA HTTPd 1.3, pero m´s tarde fue reescrito por completo. Su nombre
o
a
se debe a que Behelendorf quer´ que tuviese la connotaci´n de algo que es ﬁrme y en´rgico pero
ıa
o
e
no agresivo, y la tribu Apache fue la ultima en rendirse al que pronto se convertir´ en gobierno
´
ıa
de EEUU, y en esos momentos la preocupaci´n de su grupo era que llegasen las empresas y
o
“civilizasen.el paisaje que hab´ creado los primeros ingenieros de internet.
ıan
Adem´s Apache consist´ solamente en un conjunto de parches a aplicar al servidor de NCSA. En
a
ıa
ingl´s, a patchy server (un servidor ”parcheado”) suena igual que Apache Server.
e
El servidor Apache se desarrolla dentro del proyecto HTTP Server (httpd) de la Apache Software
Foundation.
Apache presenta entre otras caracter´
ısticas altamente conﬁgurables, bases de datos de autenticaci´n
o
y negociado de contenido, pero fue criticado por la falta de una interfaz gr´ﬁca que ayude en su
a
conﬁguraci´n.
o

2.3.

mod wsgi

mod wsgi es un m´dulo de Apache que provee una interfaz WSGI para correr Web en Python
o
sobre Apache. Y esto, es todo lo que necesitas para que tus archivos *.py se ejecuten por medio de
un navegador Web.

2.3.1.

WSGI

WSGI es el acronomico de Web Server Gateway Interface que es una especiﬁcacion para una
simple y universal interfaz entre una aplicacion web (en nuestro caso una aplicacion escrita en
Django) y un servidor Web para el lenguaje de programacion Python. Es un estandar de Python
el cual se describe con detalle en la PEP 33 1 .
1 http://www.python.org/dev/peps/pep-0333/

4

Elecci´n de la Tecnolog´
o
ıa

2.4.

PosgreSQL

PostgreSQL es un gestor de base de datos relacional que puede correr tanto bajo sistemas
operativos Windows como en distribuciones Linux como Red Hat, Suse, CentOS, etc.
Como muchos otros proyectos de c´digo abierto, el desarrollo de PostgreSQL no es manejado
o
por una empresa y/o persona, sino que es dirigido por una comunidad de desarrolladores que
trabajan de forma desinteresada, altruista, libre y/o apoyados por organizaciones comerciales.
Dicha comunidad es denominada el PGDG (PostgreSQL Global Development Group).
El nombre hace referencia a los or´
ıgenes del proyecto como la base de datos “post-Ingres”, y los
autores originales tambi´n desarrollaron la base de datos Ingres.
e
El proyecto post-ingres pretend´ resolver los problemas con el modelo de base de datos relacional
ıa
que hab´ sido aclarados a comienzos de los a˜os 1980. El principal de estos problemas era la incaıan
n
pacidad del modelo relacional de comprender ”tipos”, es decir, combinaciones de datos simples que
conforman una unica unidad. Actualmente estos son llamados objetos. Se esforzaron en introducir
´
la menor cantidad posible de funcionalidades para completar el soporte de tipos. Estas funcionalidades inclu´ la habilidad de deﬁnir tipos, pero tambi´n la habilidad de describir relaciones ıan
e
las cuales hasta ese momento eran ampliamente utilizadas pero mantenidas completamente por el
usuario. En Postgres la base de datos comprend´ las relaciones y pod´ obtener informaci´n de
ıa
ıa
o
tablas relacionadas utilizando reglas. Postgres us´ muchas ideas de Ingres pero no su c´digo.
a
o

2.5.

Python

Django esta escrito puramente en Python, por lo que Obiamente Necesitaremos Instalar Python es
un lenguaje de programaci´n interpretado cuya ﬁlosof´ hace hincapi´ en una sintaxis muy limpia
o
ıa
e
y que favorezca un c´digo legible.
o
Se trata de un lenguaje de programaci´n multiparadigma, ya que soporta orientaci´n a objetos,
o
o
programaci´n imperativa y, en menor medida, programaci´n funcional. Es un lenguaje interpretado,
o
o
usa tipado din´mico y es multiplataforma.
a
Es administrado por la Python Software Foundation. Posee una licencia de c´digo abierto, denoo
minada Python Software Foundation License,1 que es compatible con la Licencia p´blica general
u
de GNU a partir de la versi´n 2.1.1, e incompatible en ciertas versiones anteriores.
o
Python es un lenguaje de programaci´n multiparadigma. Esto signiﬁca que m´s que forzar a los
o
a
programadores a adoptar un estilo particular de programaci´n, permite varios estilos: programaci´n
o
o
orientada a objetos, programaci´n imperativa y programaci´n funcional. Otros paradigmas est´n
o
o
a
soportados mediante el uso de extensiones.
Python usa tipado din´mico y conteo de referencias para la administraci´n de memoria.
a
o
Una caracter´
ıstica importante de Python es la resoluci´n din´mica de nombres; es decir, lo que
o
a
enlaza un m´todo y un nombre de variable durante la ejecuci´n del programa (tambi´n llamado
e
o
e
enlace din´mico de m´todos).
a
e
Otro objetivo del dise˜o del lenguaje es la facilidad de extensi´n. Se pueden escribir nuevos m´dun
o
o
los f´cilmente en C o C++. Python puede incluirse en aplicaciones que necesitan una interfaz
a
programable.
Aunque la programaci´n en Python podr´ considerarse en algunas situaciones hostil a la prograo
ıa
maci´n funcional tradicional del Lisp, existen bastantes analog´ entre Python y los lenguajes
o
ıas
minimalistas de la familia Lisp como puede ser Scheme.

2.5.1.

La Filosoﬁa detras de Python

Los usuarios de Python se reﬁeren a menudo a la Filosof´ Python que es bastante an´loga a
ıa
a
la ﬁlosof´ de Unix. El c´digo que sigue los principios de Python de legibilidad y transparencia
ıa
o
5

Cap´
ıtulo 2
se dice que es ”pythonico”. Contrariamente, el c´digo opaco u ofuscado es bautizado como ”no
o
pythonico”(¨npythonic.en ingl´s).
u
e
Estos principios fueron famosamente descritos por el desarrollador de Python Tim Peters en El Zen
de Python, algunos de ellos son:
Bello es mejor que feo.
Expl´
ıcito es mejor que impl´
ıcito.
Simple es mejor que complejo.
Complejo es mejor que complicado.
Plano es mejor que anidado.
Disperso es mejor que denso.
La legibilidad cuenta.
Los casos especiales no son tan especiales como para quebrantar las reglas.
Aunque lo pr´ctico gana a la pureza.
a
Los errores nunca deber´ dejarse pasar silenciosamente.
ıan
A menos que hayan sido silenciados expl´
ıcitamente.
Frente a la ambig¨edad, rechaza la tentaci´n de adivinar.
u
o
Deber´ haber una y preferiblemente s´lo una manera obvia de hacerlo.
ıa
o
Aunque esa manera puede no ser obvia al principio a menos que usted sea holand´s.15
e
Ahora es mejor que nunca.
Aunque nunca es a menudo mejor que ya mismo.
Si la implementaci´n es dif´ de explicar, es una mala idea.
o
ıcil
Si la implementaci´n es f´cil de explicar, puede que sea una buena idea.
o
a
Los espacios de nombres (namespaces) son una gran idea ¡Hagamos m´s de esas cosas!
a

2.5.2.

Baterias Incluidas

Python tiene una gran biblioteca est´ndar, usada para una diversidad de tareas. Esto viene de la
a
ﬁlosof´ ”pilas incluidas”(”batteries included”) en referencia a los m´dulos de Python. Los m´dulos
ıa
o
o
de la biblioteca est´ndar pueden mejorarse por m´dulos personalizados escritos tanto en C como en
a
o
Python. Debido a la gran variedad de herramientas incluidas en la biblioteca est´ndar, combinada
a
con la habilidad de usar lenguajes de bajo nivel como C y C++, los cuales son capaces de interactuar
con otras bibliotecas, Python es un lenguaje que combina su clara sintaxis con el inmenso
poder de lenguajes menos elegantes.
6

Elecci´n de la Tecnolog´
o
ıa

2.5.3.

Implementaciones

En la actualidad existen diversas implementaciones de Python
CPython es la implementaci´n original, disponible para varias plataformas en el sitio oﬁcial
o
de Python.
IronPython es la implementaci´n para .NET
o
Stackless Python es la variante de CPython que trata de no usar el stack de C www.
stackless.com
Jython es la implementaci´n hecha en Java
o
Pippy es la implementaci´n realizada para Palm pippy.sourceforge.net
o
PyPy es una implementaci´n de Python escrita en Python y optimizada mediante JIT pypy.
o
org

2.6.

Django

Django es un framework de desarrollo web de c´digo abierto, escrito en Python, que respeta el pao
radigma conocido como Model Template View. Fue desarrollado en origen para gestionar varias
p´ginas orientadas a noticias de la World Company de Lawrence, Kansas, y fue liberada al
a
p´blico bajo una licencia BSD en julio de 2005; el framework fue nombrado en alusi´n al guitarrista
u
o
de jazz gitano Django Reinhardt http://es.wikipedia.org/wiki/Django_Reinhardt.
En junio del 2008 fue anunciado que la reci´n formada Django Software Foundation se har´ cargo
e
ıa
de Django en el futuro.
La meta fundamental de Django es facilitar la creaci´n de sitios web complejos. Django pone ´nfasis
o
e
en el re-uso, la conectividad y extensibilidad de componentes, el desarrollo r´pido y el principio
a
No te repitas (DRY, del ingl´s Don’t Repeat Yourself). Python es usado en todas las partes del
e
framework, incluso en conﬁguraciones, archivos, y en los modelos de datos.

2.6.1.

MVC

Antes de Explicar como funciona Django empezare por una breve explicacion de el patr´n (MVC)
o
Modelo Vista Controlador el cual es un patr´n de arquitectura de software que separa los datos y
o
la l´gica de negocio de una aplicaci´n de la interfaz de usuario y el m´dulo encargado de gestionar
o
o
o
los eventos y las comunicaciones. Para ello MVC propone la construcci´n de tres componentes
o
distintos que son el modelo, la vista y el controlador, es decir, por un lado deﬁne componentes para
la representaci´n de la informaci´n, y por otro lado para la interacci´n del usuario. Este patr´n de
o
o
o
o
dise˜o se basa en las ideas de reutilizaci´n de c´digo y la separaci´n de conceptos, caracter´
n
o
o
o
ısticas
que buscan facilitar la tarea de desarrollo de aplicaciones y su posterior mantenimiento.
De manera gen´rica, los componentes de MVC se podr´ deﬁnir como sigue:
e
ıan
El Modelo: Es la representaci´n de la informaci´n con la cual el sistema opera, por lo tanto gestiona
o
o
todos los accesos a dicha informaci´n, tanto consultas como actualizaciones, implementando tambi´n
o
e
los privilegios de acceso que se hayan descrito en las especiﬁcaciones de la aplicaci´n (l´gica de
o
o
negocio). Env´ a la ’vista’ aquella parte de la informaci´n que en cada momento se le solicita
ıa
o
para que sea mostrada (t´
ıpicamente a un usuario). Las peticiones de acceso o manipulaci´n de
o
informaci´n llegan al ’modelo’ a trav´s del ’controlador’.
o
e
El Controlador: Responde a eventos (usualmente acciones del usuario) e invoca peticiones al
’modelo’ cuando se hace alguna solicitud sobre la informaci´n (por ejemplo, editar un documento
o
o un registro en una base de datos). Tambi´n puede enviar comandos a su ’vista’ asociada si se
e
solicita un cambio en la forma en que se presenta de ’modelo’ (por ejemplo, desplazamiento o scroll
por un documento o por los diferentes registros de una base de datos), por tanto se podr´ decir
ıa
7

Cap´
ıtulo 2
que el ’controlador’ hace de intermediario entre la ’vista’ y el ’modelo’ actuando como Middleware
2
.
La Vista: Presenta el ’modelo’ (informaci´n y l´gica de negocio) en un formato adecuado para
o
o
interactuar (usualmente la interfaz de usuario) por tanto requiere de dicho ’modelo’ la informaci´n
o
que debe representar como salida.

Figura 2.1: Diagrama del Patron MVC Modelo Vista Controlador

2.6.2.

Django y el MVT

Si hicieramos una clasiﬁcacion de Herramientas de desarrollo web, podriamos clasiﬁcar a Django
como parte de la tercera generacion:

Figura 2.2: Generaciones de Herramientas de Desarrollo Web
2 Middleware es el software que proporciona un enlace entre aplicaciones de software independientes. Middleware
a veces se llama a la v´ que conecta dos aplicaciones y pasa los datos entre ellas. Los Middleware permiten que los
ıa
datos contenidos en una base de datos puedan ser accedidos a trav´s de otra. Ahorra el tiempo a los programadores.
e

8

Elecci´n de la Tecnolog´
o
ıa
Sin embargo m´s alla de las clasiﬁcaciones que podr´ existir, est´ el entender como funciona
a
ıan
a
realmente, al entenderlo se puede llegar a dominarlo.
Dijimos que era un framework MTV (una modiﬁcaci´n de MVC, nada que ver con un canal de
o
m´sica), esto se debe a que los desarrolladores no tuvieron la intenci´n de seguir alg´n patron de
u
o
u
desarrollo, sino hacer el framework lo m´s funcional posible.
a
El Modelo en Django sigue siendo el modelo
La Vista en Django se llama Plantilla (Template)
El controlador en Django se llama Vista
Una imagen nos har´ entender mejor esta relaci´n:
a
o

Figura 2.3: El patron Modelo Vista Template de Django

2.6.3.

El Modelo

El modelo deﬁne los datos almacenados, se encuentra en forma de clases de Python, las clases
deﬁnidas son traducidas por Django y este genera las Tablas necesarias para el funcionamiento del
modelo dentro de la base de datos, cada tipo de dato que debe ser almacenado se encuentra en una
variable con ciertos par´metros, posee m´todos tambi´n. Todo esto permite indicar y controlar el
a
e
e
comportamiento de los datos.
Aqui un extracto del codigo mostrando como se implementa uno de los tantos modelos con los que
trabaja el Sistema

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15

class Message ( models . Model ):
"""
Clase Para Manejar mensajes entre usuarios
"""
from_user = models . ForeignKey ( User , related_name = ’ from_user ’)
to_user = models . ForeignKey ( User , related_name = ’ to_user ’)
date = models . DateTimeField ( " Fecha y Hora " , auto_now_add = True )
issue = models . CharField ( " Asunto " , max_length =125 , default = ’ ’)
content = models . TextField ( " Cuerpo del Mensaje " )
read = models . BooleanField ( " Leido " , default = False )

class Meta :
db_table = " Messages "

9

Cap´
ıtulo 2
verbose_name = " InboxMessage "
v e rb ose_name_plural = " InboxMessages "

16
17
3
4

2.6.4.

La Vista

La vista se presenta en forma de funciones en Python, su prop´sito es determinar que datos
o
ser´n visualizados, entre otras cosas m´s que iremos viendo conforme avanzamos con el curso.
a
a
El ORM de Django permite escribir c´digo Python en lugar de SQL para hacer las consultas
o
que necesita la vista. La vista tambi´n se encarga de tareas conocidas como el env´ de correo
e
ıo
electr´nico, la autenticaci´n con servicios externos y la validaci´n de datos a trav´s de formularios.
o
o
o
e
Lo mas importante a entender con respecto a la vista es que no tiene nada que ver con el estilo de presentaci´n de los datos, s´lo se encarga de los datos, la presentaci´n es tarea de la plantilla.
o
o
o
Aqui muestro una vista sencilla que realiza una consulta base de datos que listara todos los
usuarios que sean medicos.

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18

def p a t i e n t _ s h o w _ me d i c s_ l i s t ( request ):
"""
Muestra el listado de Medicos
"""
mi_template = get_template ( ’ Patients / GestionTurnos / medics - list . html ’)
dict = g enerate_base_keys ( request )
if is_patient ( request . user ):
dict [ ’ medics ’] = UserInformation . objects . filter ( \\
user__groups__name = ’ Medico ’)
html_cont = mi_template . render ( Context ( dict ))
return HttpResponse ( html_cont )
else :
# si hay un usuario logueado intentanto acceder sera enviado a una
# pagina de error
path = request . META [ ’ PATH_INFO ’]
return HttpResponseRedirect ( " / restricted - access %s " %path )

Aunque es un ejemplo sencillo podemos apreciar el potencial de Django, como vemos no vemos
ningun codigo SQL, pues bien dicho codigo SQL se ejecuta internamente nos aleja del problema de
las restriciones de la Base de Datos ya sea que usemos PosgreSQL (como en este sistema), MySQL,
SQLServer o SQLite nosotros solo escribiremos codigo Python, El framework se encargargara de
traducir esa instrucion al motor de bases de datos correspondiente que estemos usando.

dict [ ’ medics ’] = UserInformation . objects . filter ( \\
us er __ gr ou ps __ na me = ’ Medico ’)
Traducido a SQL terminariamos con algo tan orrible como esto:
3 Como algunos lo notaran la variable from user del modelo internamente es una relacion 1:M dentro de la base
de datos.
4 La Clase interna Meta deﬁne atributos expeciales como ’db name’ que hace referencia a como se llamara la tabla
dentro de la Bases de Datos.

10

Elecci´n de la Tecnolog´
o
ıa
SELECT * FROM UserInformation as Info
INNER JOIN User ON Info . username = User . username
INNER JOIN GroupsByUsers ON User . username = GroupsByUsers . username
...

2.6.5.

La Plantilla

La plantilla es b´sicamente una p´gina HTML con algunas etiquetas extras propias de Django, en
a
a
si no solamente crea contenido en HTML (tambi´n XML, CSS, Javascript, CSV, etc).
e
La plantilla recibe los datos de la vista y luego los organiza para la presentaci´n al navegador web.
o
Las etiquetas que Django usa para las plantillas permiten que sea ﬂexible para los dise˜adores del
n
frontend, pueden Extenderse a partir de otras plantillas incluso tiene estructuras de datos como if,
por por si es necesaria una presentaci´n l´gica de los datos, estas estructuras son l´
o o
ımitadas para
evitar un desorden poniendo cualquier tipo de c´digo Python.
o
Esto permite que la l´gica del sistema siga permaneciendo en la vista. Aqui la vista para Iniciar
o
Session:

{ % extends ’ base . html ’ %}
{ % block style %}
< link type =" text / css " rel =" stylesheet " media =" all "
href ="/ media / css / fancy - forms . css " / >
< link type =" text / css " rel =" stylesheet " media =" all "
href ="/ media / css / gradient - buttons . css " / >
< link type =" text / css " rel =" stylesheet " media =" all "
href ="/ media / css / messages . css " / >
{ % endblock %}

{ % block contenido %}
< br / > < br / > < br / >
{ % if not_login %}
< div class =" fancy - form - white " style =" width : 350 px ;
margin : 0 auto ;" >
< h3 class =" title " > Inciar Session </ h3 > < br / >
< form action ="." method =" POST " >
< table style =" margin : 0 auto ; width : 330 px ;" >
<tr >
<td > < label for =" username " > Usuario : </ label > </ td >
<td > < input type =" text " name =" username " value =""
tabindex ="1" id =" username " > </ td >
< td rowspan ="2" >
< input type =" submit " value =" Login " tabindex ="3"
class =" grad - button - blue " style =" height : 50 px ;" >
</ td >
</ tr >
<tr >
<td > < label for =" password " > Contrase \˜ na : </ label > </ td >
<td > < input type =" password " name =" password " value =""
tabindex ="2" id =" password " > </ td >
</ tr >
</ table >

11

Cap´
ıtulo 2
</ form >
< br / >
</ div >
{ % if login_error %}
< br / >
< br / >
< div class =" alert " > Alerta : Error Usuario y / o Contrase \˜ na
Incorrectos </ div >
{ % endif %}
{ % else %}
< div class =" alert " > Alerta : Usted ya ha iniciado session con el
usuario < strong >{{ username }} </ strong > </ div >
< br / >
<a href ="/ logout " > Cerrar Session </ a >
{ % endif %}
{ % endblock %}

2.6.6.

La Conﬁguracion de Rutas

Django posee un mapeo de URLs que permite controlar el despliegue de las vistas, esta conﬁguraci´n es conocida como URLConf. El trabajo del URLConf es leer la URL que el usuario solicit´,
o
o
encontrar la vista apropiada para la solicitud y pasar cualquier variable que la vista necesite para
completar su trabajo. El URLConf esta construido con expresiones regulares en Python y sigue
la ﬁlosoﬁa de Python: Explicito es mejor que impl´
ıcito. Este URLConf permite que las rutas que
maneje Django se´n agradables y entendibles para el usuario.
a
Fragmento del archivo urls.py del Proyecto
(r ’ˆ $ ’ , base_views . index ) ,
(r ’ˆ index /$ ’ , base_views . index ) ,
(r ’ˆ login /$ ’ , base_views . login ) ,
(r ’ˆ logout /$ ’ , base_views . logout ) ,
(r ’ˆ change - password /$ ’ , base_views . change_password ) ,
(r ’ˆ restricted - access /$ ’ , base_views . restricted_access ) ,
(r ’ˆ restricted - access /(.+)/ $ ’ , base_views . restricted_access ) ,

12

Cap´
ıtulo 3

Etapas del desarrollo de Proyecto
3.1.

Elecci´n del Tema
o

Al momento de elegir el tema del seminario se me presento un numero de problemas ya que primero
no sabia que area se iba a aplicar, queria realizar algo distinto, y bueno queria algo que presente un
reto a nivel programacion , ahora que lo pienso el haber querido esto ultimo me termino saliendo
caro por el tiempo que termine ocupando para terminar el proyecto.

3.1.1.

Eleccion de Tecnologia

Al momento de elegir no tenia casi experiencia desarrollando aplicaciones web por lo que al menos
ya estaba decidido que iba a ser web la aplicacion, digamos fue mas una cuestion de moda, en esos
dias habia empezado el boom de la web 2.0 por lo que fue mas por una moda.

3.1.2.

Eleccion del Tema y Funcionalidades

Se que suena repetitivo pero bueno digamos fue la parte mas diﬁcil a la hora de decidir que queria
hacer, aunquen bien el tema elegido, mmm digamos que salio de la galera por una interconsulta
con un posible cliente que al ﬁnal no llego a mas que intercambiar un par de emails, pero fundo las
bases y me parecio era una buena idea, consulte un poco los seminarios anteriores aunque habia
temas relacionados el desarrollo no era muy extensos ni aplicado exactamente al area que pretendia.
Habia desarrolladas aplicaciones dedicadas a la facturacion, atencion, etc. Con el desarrollo mi
aplicacion trataba de juntar dos partes el seguimiento o evolucion del paciente lo cual se registra
mediante el documento de Historia Clinica, lo que era bueno por que al menos no iba a reinventar
la rueda. Llegado el momentos de presentar el tema a mi director de tesis me dijo que era poco,
supongo que fue por que no supe explicarlo bien, en ﬁn habia que agregar algo mas y en esos
dia tube que asistir a interconsulta medica, cuando entre en el consultorio note que la secretaria
estaba con una hoja de calculos en MS Excel registrando y comprobando los tunos para el dia,
automaticamente me di cuenta de una gran falencia, sin importar lo automatizado que estubiese el
consultoria las tareas mas simples como la de asignar turnos se seguia realizando de una manera
muy poco practica, la secretaria tenia una hoja de calculo preformateada con los horarios de cada
dia, la cual debia duplicar para registrar un nuevo dia, de ahi me surgio la idea de implementar una
funcionalidad que agilice dicho problema y por que no brindar una platarfoma virtual para que los
pacientes pudiesen solicitar turnos, dejando de depender tanto de los telefono, con ello el tema y
las funcionalidades principales quedaron deﬁnidas.
13

Cap´
ıtulo 3

3.2.

An´lisis de Requisitos y B´ squeda de Informaci´n
a
u
o

Luego de elegido el tema llego el momento de averiguar como funcionaba todo, aunque esto sea un
software academico queria que despues de desarrollado al menos fuera util y no solo dejarlo morir
apilado como un seminario mas.
Sobre la parte de gestion de turno el problema era algo sencillo, ya que todo el mundo alguna ves
tuvo que sacar turno para ya sea ser atendido o hacer un determinado tramite, la diﬁcultad radicaba
mas en que no tenia idea como modelizar un problema y los datos que se deberian manejar.
En cuanto a historia clinica, hubo que visitar algunos centros medicos y especialistas y solicitar
informacion acerca de como ellos manejaban las historia clinicas de sus paciente, que tipo de informacion era inpresindible registrar en ella y cual podria ser secundaria, fue algo tedioso digamos ya
que la informacion sobre los pacientes es informacion sencible y no es de libre acceso.
Ademas sumando lo que habia recabado y gracias a un amigo que me paso un par de modelos que
consiguio y un poco de busqueda de informacion referente en la web, logre generar un panorama
mas o menos concreto de lo que iba a hacer.

3.3.

Funcionalidades Incluidas y Descartadas

El nombre del tema o las funcionalidades principales elegidas no dice mucho en si sobre que se iba
a desarrollar sobre todo en la parte de historia clinica ya que esta area abarcava un gran numero de
posibles estudios que podrian ser incluidos en este documento los cuales algunos son muy especiﬁcos
del area de estudio, por ejemplo un odontograma solo seria de interes para un medico odontologo y
en si mucha relevancia no tendria al momento de tratar otras enfermedades, por lo que habia que
deﬁnir que estudios se deberian incluir como minimo y cuales se descartarian 1 .

3.3.1.

Funcionalidades Incluidas

Luego de revisar los modelos en papel en su mayoria de diferentes organismos medicos que consulte
se determino que se incluirian los siguientes estudios:
Habitos Toxicos.
Antecedentes Perinatales

2

Grupo Familiar 3 .
Almacenamiento de Imagenes Relacionadas con Diferentes Estudios.
Examen de Cabeza.
Examen de Cuello.
Examen Signos Vitales.
Examen de Piel Faneras y Tejido SubCutaneo.
Examen Osteo Articular.
Examen Sistema Respiratorio.
Examen del aparato Cardiovascular.
Adicionalmente tambien se registran las Interconsultas Medicas y los Medicamentos que fueron
recetados al paciente.
1 Al menos en esta version, tengase en cuenta que esto es un software desarrollado con ﬁnes academicos aunque
es factible el desarrollo de nuevos modulos, su implementacion y aplicacion en casos reales.
2 Hace Referencia a antecedentes del nacimiento
3 Esto no es un Examen en si sino mas bien que sirve para consulta en caso del que el paciente posea enfermedades
Hereditarias.

14

Etapas del desarrollo de Proyecto

3.3.2.

Funcionalidades no Incluidas

Si tubiese que nombrar que estudios no se implementaron no terminaria mas aqui hablando del
modulo de Historia Clinica, en esta session mas que nada contemplo funcionalidades que en un
principio estaban previstas 4 pero a medida que el desarrollo del sistema avanzo perdieron importancia por su aplicacion o por cuestiones de falta de tiempo, aqui emnumero algunas de las
funcionalidades que se descartaron:
Gestion de Turnos - Deﬁnir Especialidad del Medico para atencion.
Gestion de Turnos - Especiﬁcar Habitacion del Consultorio para el Turno.
Historia Clinica - Subir Archivos.
Historia Clinica - Analisis de Laboratorios.
Historia Clinica - Conectar con el Sistema Vademecum.
No son todas pero considero son las mas importantes o relevantes.

3.4.

Seguimiento y desarrollo del Proyecto

El seguimiento y desarrollo del proyecto digamos no fue continuo fue mas algo bastante accidentado
si podria decirse, y bueno hasta la fecha solo habia programado peque˜as aplicaciones, enfrentaba
n
el problema de que me topaba con una metodologia diferente de lo que manejaba, a la hora de
encarar lo relacionado con la programacion.
Al menos a la hora de mantener el codigo agradesco haber conocido en unas charlas unas
semanas antes la herramienta de control de versiones GIT 5 que digamos a simple vista te
permite gestionar las diferentes versiones de tu codigo incluso volver a versiones anteriores si
fuese necesario. Este proyecto de seminario incluido tanto el informe del mismo como su codigo
fuente se encuentran hospedados en un repositorio online de git en la siguiente direccion web
urlhttp://www.github.com/l2radamanthys/SGCM.git alli si desean pueden vajar la ultima version
del mismo.
En cuanto a programacion como feeback puedo decir lo siguiente:
El tama˜o del sistema me supero enormemente, eso se nota mas cuando miro hacia atras y
n
considero el tiempo que me consumio estar programando, considero que ubiese sido mejor encarar
el sistema en un grupo de 2 o mas personas.
Mas de lo mismo, querer hacerlo todo uno desde 0 tampoco sirve, menos si no planiﬁcas y quieres
ponerte a programar desde el primer dia, a razon de eso termine dandome cuenta a mitad de
proyecto que tenia que reconstrui todo, por que nunca me sente a pensar como debia extrutar la
aplicacion.

4 las mismas no estaban especiﬁcadas por escrito en el anteproyecto sino mas bien son caracteristicas que tenia
pensadas
5 www.git-scm.com

15

16

Cap´
ıtulo 4

Antecedentes
4.1.

Historia Clinica

Actualmente en la mayoria de los centros de salud la informacion que compone la Historias Clinicas
de cada paciente es almacenan mediante documentos ﬁsicos, en su mayoria totalmente elaborados
a mano, en otros casos usando plantillas con campos preformateados (Como se puede Observar en
las Figuras 3.1 y 3.2), lo cual genera varios problemas.
En cuanto al software existente aplicado a la manipulacion de historia clinica, este suele ser muy
incompleto y abocado a la especialidad del medico, es por ello que si esta informatizado cada area
suele manejar sistemas que terminan siendo incompatibles entre si.

Figura 4.1: Almacenamiento Fisico de Archivos
17

Cap´
ıtulo 4

Figura 4.2: Modelo Historia Clinica Ministerio de Salud de La Nacion Pag 1

18

Antecedentes

Figura 4.3: Modelo Historia Clinica Ministerio de Salud de La Nacion Pag 2

19

Cap´
ıtulo 4

4.2.
4.2.1.

Problemas del Sistema Actual
Almacenamiento

A medida que crece el numero pacientes y la informacion que va anexando a cada Archivo se
va necesitando mas espacio ﬁsico para almancenar dicha informacion. Por ello con el paso del
tiempo las instalaciones dedicadas a tal ﬁn suelen verse colapsadas por los grandes volumenes de
informacion que deben manejar.

4.2.2.

Busqueda y Localizacion

La Busqueda de expedientes se puede agilizar un poco utilizando una buena organizacion, el
problema es que la mayoria de los ediﬁcios para tal ﬁn, suelen estar saturados por grandes volumenes de archivos ﬁsicos, Por lo que encontrar un archivo requerido suele ser una tarea costosa y lenta.

4.2.3.

Deterioro

En lo que hace a la conservaci´n propiamente dicha, el combate de los problemas habituales que se
o
derivan de las condiciones clim´ticas, de la humedad, de las plagas, del deterioro natural del papel,
a
especialmente por su fabricaci´n con celulosa desde hace dos siglos, es una constante que, pese
o
a sus avances, no ha encontrado soluciones deﬁnitivas. Por ende, una preocupaci´n com´n a los
o
u
archivos y bibliotecas, es encontrar remedios pr´cticos y asequibles para asegurar la preservaci´n
a
o
de sus acervos. De lo anterior se desprende la necesidad, en el nivel nacional, de procurar el
establecimiento de pol´
ıticas y normas sobre conservaci´n en las instituciones p´blicas y privadas
o
u
dedicadas a la protecci´n del patrimonio.
o

4.2.4.

Otros Poblemas

Otros problemas que acarrean el uso de archivos ﬁsicos son:
P´rdida, alteraci´n o da˜o de documentos importantes
e
o
n
Gasto excesivo en fotocopias
Altos costos de personal para administrar, suplir, mantener y recuperar el archivo f´
ısico
Costos asociados al transporte de documentos ya sea interna o externamente
Costos asosiados al espacio f´
ısico requerido para su almacenamiento
Falta de condiciones adecuadas para el almacenamiento de documentos como: ventilaci´n,
o
humedad, temperatura
Falta de respaldo adecuado en caso de catastrofe como incendio, inundaci´n o terremoto
o

4.2.5.

La Solucion Planteada

Por ello este era un ecenario perfecto donde Es Necesario informatizar el Actual Sistema, lo cual
solucionaria los 2 principales problemas del mismo que son el Excesivo espacio de almacenamiento
y el lento trabajo de busqueda ademas de:
Reducir costos de Personal Administrativo, ya que las busquedas y registro las hara el Sistema.
20

Antecedentes
Brindar la informacion de manera rapida en situaciones criticas que requieren un rapido
accionar por parte del Medico.
Disponibilidad En todo momento y cualquier lugar para consulta por parte de los Medicos
ya que solo requerira disponer de un usuario y un ordenador con coneccion a Internet para
poder consultar.
Es cierto que los sistemas informaticos sufren problemas de Almacenamiento, Busqueda (en el
caso de grandes volumenes de informacion) y deterioro por el paso del tiempo Pero en este caso el
primero se soluciona Agregando mas espacio de disco, cosa que hoy en dia es algo relativamente
barato a razon de 1 peso = 1 Gb. 1
El problema de las busqueda no afecta mucho con la velocidad de los equipos actuales se puede
consultar bases de datos con millones de registro en unas pocas milesimas de segundos dicho
tiempo resulta impersectible para la persona en la mayoria de las veses, en todo caso dependera
de la implementacion y el motor de bases de datos mas que de las prestaciones del hardware.
En cuanto al deterioro, puede que con el tiempo los equipos de hardware tales como discos duros
fallen en algun momento, pero esto es salvable siempre y cuando se realizen buenas practicas tales
como implementar un sistemas de backup, tambien replicacion de datos en caso de que se necesite
alta disponibilidad de la informacion que se almacena.

4.3.

Gestion de Turnos

En lo que respecta a asignacion de turnos, el sistema actual en la mayoria de los casos no ha tenido
un mejor panorama en cuanto a implatancion de un software, aunque ya en esta area existen
algunas aplicaciones que intentan solucionar el problema de manera mas o menos eﬁcientes.

1 Gb hace referencia a Gigabyte que es una medida utilizada en informatica la cual normalmente hace referencia
a tama˜os de almacenamiento.
n

21

22

Cap´
ıtulo 5

El Proyecto
5.1.

Motivaci´n
o

En la actualidad existen pocos sistemas Aplicados en el ´mbito de la gesti´n en el area de Medicina
a
o
y los existentes suelen ser solo para areas especiﬁcas

5.2.

Descripci´n del Proyecto
o

Lo que se pretendi´ con este proyecto era poder desarrollar un sistema que uniﬁque la areas de
o
gesti´n y asignaci´n de turnos y el manejo de historia cl´
o
o
ınica en un unico sistema.
´
Cabe aclarar que el mismo se desarrollo con el prop´sito de poder ser utilizado principalmente
o
en policonsultorios m´dicos ya que no plantea cuestiones tales como internaciones, traslado de
e
pacientes, etc. como para poder ser de correcta utilidad en cl´
ınicas y hospitales.

5.3.

Arquitectura de la Aplicaci´n
o

Implementado en Python utilizando en Framework Django, utilizando el motor de bases de datos
PosgreSQL, funciona con una interfaz web por lo que se se accede al mismo mediante un Navegador
Web, Internamente maneja 2 Modulos principales que son el “Modulo de Gesti´n de Turnos el
o
“Modulo de manejo de Historia Cl´
ınica”, al ser un sistema web implementa un tercer modulo de
manera impl´
ıcita que control de acceso mediante la deﬁnici´n de Grupos Usuarios y sus correspono
dientes permisos.
2

5.4.

Modulo Usuarios

La gesti´n de usuarios es un proceso bastante com´n en casi todos los sistemas, muchos desarrollao
u
dores terminan programando funcionalidades de autenticaci´n una y otra ves a lo largo de los a´os
o
n
y casi siempre funcionando de la misma manera. Django se pens´ para simpliﬁcar la vida no para
o
complicarla, por eso al ser una tarea bastante com´n en casi todas las aplicaciones, viene incluido
u
un completo sistema de autenticaci´n que gestiona:
o
Usuarios
Grupos
Permisos
Sessiones de Usuarios y Cookies
23

Cap´
ıtulo 5
Aunque en cuanto a lo que se reﬁere manejo de sesiones es un completo sistema solo maneja un
peque˜o conjunto de datos por lo que hubo que extender mediante la adici´n de un Modelo adicional
n
o
para complementar la informaci´n de los usuarios.
o

5.4.1.

Modelos

Aqui un diagrama con todos los modelos que componen el modulo Usuarios.

Figura 5.1: Diagrama con modelos que componen el modulo Usuarios
El unico modelo que fue necesario agregar es UserInformation que es para extender la informacion
´
que se registra en el Modelo User el resto vienen con Django. En Resumen aunque se podr´ haber
ıa
24

El Proyecto
desarrollado Un Modulo desde cero que gestione las sesiones de usuarios hubiese generado trabajo
extra sin sentido.

5.4.2.

Usuarios y Permisos

El sistema contempla 4 tipos de usuarios los cuales son:
Usuarios no registrados
Pacientes
M´dicos
e
Administrativos
5.4.2.1.

Usuarios no Registrados

Los Usuarios no registrados que vendr´ a ser cuando el usuario ingresa a la aplicaci´n y no hay
ıa
o
ninguna sesi´n iniciada, pueden acceder al sistema para consultar informaci´n b´sica y horarios
o
o
a
de atenci´n de los especialistas que forman parte de la instituci´n, adem´s de tener la opci´n de
o
o
a
o
registrarse como paciente.

5.4.2.2.

Paciente

El rol Paciente corresponde a los usuarios comunes, un usuario paciente puede ser creado por
cualquiera de los otros roles, en caso que sea un usuario no registrado quien da el alta como
paciente, el mismo deber´ conﬁrmar el registro mediante un codigo de veriﬁcaci´n que el sistema le
a
o
enviara al correo antes de poder comenzar a usar su cuenta, en los otros casos (el usuario Paciente
es registrado por un medico o un Administrativo) no se requerida dicha conﬁrmaci´n.
o
En cuanto a los privilegios del usuario Paciente, este adem´s de poder consultar la la informaci´n
a
o
de los especialistas puede solicitar un turno para ser atendido a un especialista en particular,
tambi´n realizarle una interconsulta (mediante el sistema interno de mensajer´ y modiﬁcar sus
e
ıa)
datos b´sicos, en resumen sus posibles funciones son:
a
5.4.2.3.

Medico

Los Usuarios M´dicos los cuales son asignados por los Administrativos a los Especialistas, en
e
cuanto a privilegios y funcionalidades dentro del sistema, los mismos pueden:
Registrar Pacientes
Modiﬁcar datos de Pacientes
Enviar Mensajes a cualquier Usuario
Registrar Turnos
Cancelar Turnos
Administrar sus Horario de Atenci´n
o
Cancelar d´ de atenci´n
ıas
o
Son los unicos usuarios que tienen acceso al Modulo Historia Clinina, en cuanto a privilegio sobre
´
este modulo diremos que tiene la posibilidad de Crear,Modiﬁcar, Borrar (salvo casos espec´
ıﬁcos,
que por su naturaleza no se permite dicha modiﬁcaci´n.) un conjunto de Estudios, para mas detalle
o
se recomienda consultar el apartado sobre tal modulo.
25

Cap´
ıtulo 5
5.4.2.4.

Administrativo

En cuanto a los usuarios Administrativo poseen los mismos permisos que un usuario Medico
exceptuando que no poseen acceso a las funcionalidades del Modulo Historia Cl´
ınica, como privilegio
especial pueden administrar las cuentas de usuario de todos los roles incluidos en el sistema, incluido
los Medico y otros Administrativos.

5.4.2.5.

Admin

Existe un rol adicional que Django crea y gestiona por aparte, el mismo queda delegado para
los administradores del sistemas ya que mediante el se puede acceder y modiﬁcar cualquier
parte de la base de datos, por lo que podr´
ıamos decir que es un Super Usuario, o usuario
Root como para hacer analog´ con los usuarios en entornos Unix, el mismo no forma parte
ıa
del sistema desarrollado sino como funcionalidad adicional Django provee un panel de administraci´n, para dicho tipo de usuario, al cual se puede acceder desde /admin/ por ejemplo
o
si estuvi´semos ejecutando en un servidor local la ruta completa seria http://127.0.0.1/admin/1 .
e

Figura 5.2: Vista del Panel Administracion provisto por Django
Cabe aclarar que el Super Usuario del sistema de Autenticaci´n de Django dentro del sistema
o
en si mismo no posee ning´n privilegio adicional, es mas para compatibilizar el usuario con la
u
funcionalidad del sistema, cuando se inicializan por primera ves, se crea un usuario de este tipo
llamado admin al cual se le asignan privilegio de Administrativo.
1 Se puede consultar mas acerca de Django Admin en https://docs.djangoproject.com/en/dev/ref/contrib/
admin/

26

El Proyecto

5.5.

Modulo Gesti´n de Turnos
o

Dejando de lado el modulo Usuarios que nos provee Django el sistema desarrollado se divide esencialmente en 2 partes o m´dulos, aqu´ explicare como se dise˜o e implemento el Modulo Gesti´n de
o
ı
n
o
Turnos, que a mi consideraci´n fue el que mayor reto aporto a la hora de pensar un soluci´n para
o
o
poder implementarlo.
El modulo se encarga de implementar las siguientes funciones

Gestionar Datos de Usuarios

Mensajer´ Interna
ıa

Asignacion de Especialidades Medicas

Asignaci´n de Turnos
o

5.5.1.

Deﬁnicion del Modelo

Aqui se muestra el diagrama de modelos que componen el modulo Gestion de Turnos 2 , por la
cantidad de modelos se mostrara en 2 diagramas, igualmente tengase en cuenta que corresponden
a un unico modelo, lo que haremos sera separar en los modelos especiﬁcos utilizados para gestion
de turnos y el resto de los modelos deﬁnidos que complementan la funcionalidad del modulo.
Por Cuestiones de tama˜o del diagrama y por la cantidad modelos utilizados en el modulo se
n
complicaba poder mostrarlos todo en una misma pagina por lo que para mejor visualizacion e
interpretacion separe el mismo en 2 partes:
El primer diagrama uniﬁca todo lo referente a la asignacion de turnos, que es lo principal del
modulo:

2 Vuelven a aparecen los modelos User y UserInformation por que casi todos los otros modelos dependen de alguna
forma de ellos

27

Cap´
ıtulo 5

Figura 5.3: Modulo Gestion Turnos - Diagrama Modelos correspondiente a la Gestion de Turnos

En el segundo diagrama se muestra los modelos necesarios para las funcionalidades adicionales.

Figura 5.4: Modulo Gestion Turnos - Modelos Adicionales
28

El Proyecto

5.5.2.

Gestionar Datos de Usuarios

Esta funcionalidad describe, todo lo referido a la alta, baja y modiﬁcaci´n de los datos de todos los
o
usuarios. Implementa las vista tanto para modiﬁcacion de datos personales, vistas de administrador
para gestionar datos de otros usuarios.

5.5.3.

Mensajer´ Interna
ıa

Permite la comunicacion interna entre los usuarios, su principal utilidad es permitir que los Pacientes
puedan realizar peque˜as interconsultas a los medicos atraves de la plataforma, sin requerir una
n
consulta medica.

5.5.4.

Asignacion Expecialidades Medicas

Dentro el modulo permite asignarles especialiades medicas correspondientes a a los profesionales,
aunque no realiza una distincion especiﬁca a la hora de asignar turnos, simplemente considera que
el medico en dicho horario puede atender cualquier consulta relacionada a sus especializaciones. 3

5.5.5.

Asignaci´n de Turnos
o

La Asignacion de Turnos al los pacientes es la principal funcionalidad del modulo, que entre otras
funcionalidades permite:
Deﬁnir dias de atencion
Deﬁnir dias feriados o de Vacaciones
Asignar turnos
Controlar la asistencia de los pacientes.

5.5.6.

Dise˜ o de Modelos Para la Gestion de Turnos
n

Aqui se muestran los algunas consideraciones que se tubieron en cuenta a la hora de dise˜ar los
n
modelos para implementar la funcionalidad de asignacion de turnos propiamente dicha la cual deﬁne
el nombre del modulo.
5.5.6.1.

BussinesHour(Horario De Atencion)

Este modelo se utiliza para deﬁnir el horario de atencion de cada medico, en el se especiﬁcan
parametros como:
user: referencia al medico al cual pertence
date: deﬁne el dia de atencion

4

start time, end time: marca el horario de inicio y ﬁn del dia de atencion del medico.
turn duration duracion estimada del turno
En base a esto se puede calcular un dato adicional que es la cantidad de turnos que se pueden
asignar en tal dia, y se hace de la siguiente manera:
numero\ t u r n o s = ( hora \ f i n − hora \ i n i c i o ) // t u r n \ d u r a t i o n
Esto devolvera un valor entero, que sera el numero maximo de turnos que se puedan asignar.
3 Tengase en cuenta que es raro ver un medico con varias especializaciones Medicas y que el sistema fue pensado
para ser utilizado en un consultorio medico, donde no se suele contar con equipamiento de alta complejidad.
4 Esto hace referencia a los dias de la semana osea Lunes, Martes,..., etc. por el momento solo se puede deﬁnir un
unico dia de atencion por dia por medico.

29

Cap´
ıtulo 5
5.5.6.2.

DayOﬀAttention (Dias de Atencion)

Este modelo maneja la disposicion horaria de una fecha en particular, se basa en los datos que se
deﬁnieron en el modelo anterior BussinesHour, por lo que solo se pueden generar en las fechas que
correspondan con los dias de la semana asignados, cuenta con los siguientes parametros:
bussines hour: referencia al horario de atencion deﬁnido por el medico.
date: que fecha cae ese dia, esto se reﬁere al dia del a˜o especiﬁco.
n
status: informacion del estado del dia, es de tipo booleano y especiﬁca el estado del dia de
atencion siendo el valor true para explicar que se pueden asignar mas turnos y FALSE que
no se pueden asignar mas. 5
number of turns: numero de turnos que van siendo asignados
current end time: horario actual de ﬁnalizacion
5.5.6.3.

Turn (Turno)

Este modelo se deﬁne para registrar la informacion correspondiente a los turnos asignados es dependiente del modelo anterior (DayOﬀAttention) donde se especiﬁcan el resto de los datos como la
fecha.
En cuanto a sus atributos, mucho no hay que explicar y son:
day: hace referencia a un dia de atencion (DayOﬀAttention)
medic: referencia a los datos del medicos
patient: referencia al paciente.
start, end: hacen referencia a las horas de inicio y ﬁn correspondientemente.
status: estado del turno es de tipo enumerado deﬁne varios posibles estados entre los que
estan (pendiente, concretado, cancelado medico, cancelado paciente).
observation: campo de texto, para registrar cualquier observacion pertinente.
number: se reﬁere al numero de orden para atencion.
5.5.6.4.

Consideraciones

En cuanto a funcionamiento de la asignacion de turnos se tienen en cuenta las siguientes consideraciones:
Un turno no puede ser cancelado despues de su hora de inicio por el paciente, siendo asi posible
de ser cancelado por el medico.
Al ser cancelado por un paciente se debe cambiar correspondiente estado dentro de dia de atencion.
Si un medico cancela un turno el mismo no se modiﬁcara el estado en la tabla dia de atencion,
como el caso de los paciente que cancelen un turno, para el sistema hara de cuenta que los mismo
ocurrieron, aunque si un turno es cancelado por el medico el mismo no sera reprogramado.
En todos los casos los usuarios deverian poder recivir el correspondiente notiﬁcacion de que se
cancelo dicho turno invitandolos a reprogramar el mismo.
5 Que un dia de atencion este marcado como no disponible (status=FALSE) puede signiﬁcar que el cupo este
lleno o que ese dia el medico no pueda asistir o sea feriado por ejemplo, para determinar de que se trata si dice no
disponible y no hay ningun turno asignado (number of turns=0) signiﬁcara que ese dia el medico no atiende

30

El Proyecto
Los pacientes no pueden solicitar turnos durante el horario de atenci´n del mismo, si el servidor
o
comprueba que existen turnos sin actualizar estado como pendientes, si el medico o administrador
no actualizo los msmos y ya paso la hora del mismo tiene que enviar notiﬁcaciones correspondientes.

5.6.

Modulo Historia Cl´
ınica

Este modulo del sistema tiene como tarea manejar y recolectar toda informaci´n referente a las
o
historia cl´
ınica de los pacientes.

5.6.1.

¿Que es una Historia Cl´
ınica?

Antes de entrar en todo lo referente sobre el desarrollo del correspondiente modulo tomo un momento para explicar concretamente a que no referimos cuando hablamos de la misma por lo que
aqu´ tenemos la siguiente deﬁnici´n:
ı
o
La historia cl´
ınica es un documento m´dico-legal que surge del contacto entre el profesional de
e
la salud (m´dico, pod´logo, psic´logo, asistente social, enfermero, kinesi´logo, odont´logo, etc.) y
e
o
o
o
o
el paciente donde se recoge la informaci´n necesaria para la correcta atenci´n de los pacientes. La
o
o
historia cl´
ınica es un documento v´lido desde el punto de vista cl´
a
ınico y legal, que recoge informaci´n
o
de tipo asistencial, preventivo y social.
La Historia Cl´
ınica se origina con el primer episodio de enfermedad o control de salud en el que se
atiende al paciente, ya sea en el hospital o en el centro de atenci´n primaria, o en un consultorio
o
m´dico. La historia cl´
e
ınica est´ incluida dentro del campo de la semiolog´ cl´
a
ıa ınica 6 .

5.6.2.

La Historia Cl´
ınica en la Ley Argentina

La documentaci´n m´dica comprendida en lo que com´nmente se denomina “historia cl´
o
e
u
ınica”la
cual no se encontraba regida por leyes especiﬁcas en la Argentina hasta el 19 de noviembre del
2009 donde se promulga la Ley 26.529 [26].
En el cap´
ıtulo primero de la ley sen enumeran los derechos de los pacientes, en el art´
ıculo 2,
inciso “a”. Renueva el derecho a la intimidad y la conﬁdencialidad, donde se hace hincapi´ sobre
e
la responsabilidad de preservar la intimidad y conﬁdencialidad de toda la documentaci´n m´dica
o
e
concerniente a los pacientes, particularmente el inciso “d”del mismo art´
ıculo:
“El paciente tiene derecho a que toda persona que participe en la elaboraci´n o manipulaci´n de
o
o
la documentaci´n cl´
o
ınica, o bien tenga acceso al contenido de la misma, guarde la debida reserva,
salvo expresa disposici´n en contrario emanada de autoridad judicial competente o autorizaci´n
o
o
del propio paciente”.
Garantiza adem´s el respeto por la autonom´ del paciente y el derecho a recibir la informaci´n
a
ıa
o
necesaria para su salud, incluyendo el derecho a negarse a ser informado.
El cap´
ıtulo III reza sobre el Consentimiento Informado, el cual est´ basado en el principio de
a
autonom´ es decir, el derecho del paciente a ser reconocido como persona libre y due˜a de tomar
ıa,
n
sus decisiones. Para ello el paciente debe estar en condiciones de comunicar su decisi´n y ´ste ha
o
e
sido informado adecuadamente de sus opciones, es decir, no pueden ser decisiones hechas como
resultado de delirio o alucinaciones. La decisi´n del paciente es consistente con sus valores y metas
o
y se mantiene estable en el tiempo si no han habido modiﬁcaciones hechas por el mismo sujeto.
Los familiares de un paciente no est´n en el derecho de requerir al m´dico del paciente que no se
a
e
le comunique ciertos detalles o informaci´n al mismo.
o
6 La Semiolog´ Cl´
ıa ınica es el cuerpo del conocimiento que se ocupa de la identiﬁcaci´n de las diversas manifestao
ciones patol´gicas [?]
o

31

Cap´
ıtulo 5

Ahora bien vallamos a lo que nos interesa:
La ley deﬁne a la Historia Cl´
ınica como el documento “obligatorio, cronol´gico, foliado y como
pleto en el que consta toda actuaci´n realizada al paciente por profesionales y auxiliares de la
o
salud.”Deﬁne que la historia cl´
ınica es propiedad del paciente, siendo este el titular de la misma.
Siempre que un paciente solicite la historia cl´
ınica, la instituci´n competente debe entregarle una
o
copia autenticada en 48 horas. Si no es entregada en ese plazo, el paciente est´ autorizado a
a
interponer un recurso de Habeas Data, juzgado de por medio.
Entre los datos que han de consignarse en forma obligatoria esta la fecha de inicio y confecci´n
o
de la historia cl´
ınica, datos identiﬁcatorios del paciente y su n´cleo familiar, datos del profesional
u
interviniente y su especialidad, registros claros y precisos de los actos realizados por profesionales
y auxiliares intervinientes, antecedentes gen´ticos, ﬁsiol´gicos y patol´gicos si los hubiere, y todo
e
o
o
acto m´dico realizado o indicado.
e
Incluye en la historia cl´
ınica a todos los documentos que hagan referencia a informaci´n de salud
o
del paciente, a˜adiendo los consentimientos informados, hojas de indicaciones, hojas de enfermer´
n
ıa,
estudios complementarios, incluyendo las“pr´cticas realizadas, rechazadas o abandonadas..Esto
a
ultimo es interesante: si el paciente abandona o rechaza un tratamiento propuesto, es responsabili´
dad del m´dico consignarlo, que a ﬁn de cuentas es el beneﬁciario de que aquello quede asentado
e
desde el punto de vista m´dico-legal.
e
Autoriza a reclamar una copia de la historia cl´
ınica al paciente y su representante legal, al
c´nyuge o conviviente de hecho (sin importar el sexo), y a los herederos forzosos. Lo que no queda
o
claro del art. 19 inciso b es si los c´nyuges y convivientes requieren o no la autorizaci´n del paciente.
o
o
Se a˜ade esta ley al cap´
n
ıtulo 11 del C´digo de ´tica de la Asociaci´n M´dica Argentina, del a˜o
o
e
o
e
n
2001. En ella se explaya en forma m´s extensa y detallada sobre la confecci´n. Particular inter´s
a
o
e
debi´ramos prestarle al art. 168:
e
“La historia cl´
ınica ha de ser un instrumento objetivo y comprensible por terceros, y no solo
por quienes escriben en ella..A su vez, el art. 171 especiﬁca que ”debe ser legible, no debe tener
tachaduras, no se debe escribir sobre lo ya escrito, no debe ser borrada, no se debe dejar espacios
en blanco y ante una equivocaci´n debe escribirse ERROR y aclarar lo que sea necesario. No se
o
debe a˜adir nada entre renglones.”
n

5.6.3.

Funcionalidades

Las funcionalidades que se implementan en correspondiente m´dulos son solo b´sicas y comprenden
o
a
la documentaci´n practicas mas comunes dentro del area de la medicina, esto no implica que
o
solo valla a servir para eso unicamente, por su extructura el modulo contempla la posibilidad de
´
agregar nuevos componentes para estudios especiﬁcos que sean requeridos y que no hayan sido
contemplados en el actual sistema.
El modulo se encarga basicamente de registrar los diferentes estudios que se le practican a un paciente, adicionalmente registra informacion correspondiente a las interconsultas 7 y las observaciones
del medico, asi como los medicamentos que fueron recetados por el especialista.
7 Consultas

32

medicas realizadas por el paciente

El Proyecto

5.6.4.

Deﬁnicion de Modelos

Los modelos que componen el Modulo corresponden a los diferentes tipos de Examenes de practica
mas comun8 en lo que corresponden a Historia Clinica.
Aqui tambien por la cantidad de modelos se hace diﬁcil poder colocarlos todos en un unico
diagrama dentro de la pagina por lo que tambien se separara en varias partes sin romper las
relaciones de los mismo, osea aunque se realize una separacion de los mismos corresponden a un
unico modulo por lo que tendrian que verse como un todo y no como partes separadas:

5.6.5.

Modelos Basicos

Figura 5.5: Historia Clinica Modelos Basicos
5.6.5.1.

Image

Modelo encargado de almacenar imagenes de importancia sobre estudios realizados al paciente.
title titulo de la imagen
content Informacion adicional sobre la imagen.
date Fecha que se tomo la imagen
image referencia al archivo
5.6.5.2.

MedicalConsulation (Consulta Medica)

Este Modelo almacen la informacion que el medico registra durante la consulta medica desde el
motivo que origino la consulta, observaciones del medico, y demas informacion:
date Fecha de la consulta
8 Esto no es que este deﬁnido en algun lado que sean solo estos, sino que mas bien son los examenes que durante
el analisis de diferentes modelos se presentaban mas comunmente.

33

Cap´
ıtulo 5
issue Motivo de la consulta
diagnostico Diagnostico del medico.
physical exam Observaciones del Examen Fisico footnoteCorresponde a un examen menor
o visual simple que el medico realiza al paciente
observations Anotaciones Adicionales.
5.6.5.3.

MedicalPrescription (Receta Medica)

Almacena informacion relevante sobre el medicamento prescripto en la receta medica, como se
observa en el modelo las recetas medicas dependen directamente de una consulta medica, se asume
que no se puede recetar un medicamento sin existir una consulta medica previa, aunque a partir
de una consulta medica, se pueden generar varias recetas. Los datos que almacena el modelo se
corresponden segun las normas actuales sobre informacion que debe contener una receta medica y
son:
prescription date Fecha que fue prescripto el medicamento
expiration data Vencimiento de la receta, pasada esta fecha la misma debe considerarse
invalida.
active principie Principio Activo o nombre generico de la monodroga que se receta.
dosage Tama˜o de la dosis
n
administration route Modo en que se debe tomar la droga
container format Formato del Envase y cantidad.
posology Cada cuanto debe administrarce y por que periodo
5.6.5.4.

AntecedentesPerinatales

Este tipo de modelo registra un unico informe y se corresponde a los datos de nacimiento del
paciente si es que existen, registra la siguiente informacion:
pregnancy numbre Numero de embarazo de la madre.
pregnacy duration Duracion del embarazo en semanas.
controls Si asistio a controles medicos durante el embarazo.
normal birth Nacio de parto normal o por cesarea.
weight Peso al nacer.
size Tama˜o al nacer.
n
pathologies Presento complicaciones al nacer.
medical care Requirio atencion medica expecial.
observations Otras anotaciones.
34

El Proyecto
5.6.5.5.

ToxicHabit (Habitos Toxicos del Paciente)

Se reﬁere a si el paciente consume algun tipo de droga osea reﬂeja las adicciones del mimo sin importar si las drogas son legales o ilegales, para ayudar a determinar posibles causas y complicaciones
en su evolucion.
snuﬀ Tabaco
alcohol Alcohol
drugs Drogas
infusions Infuciones
observations Anotaciones Adicionales.

5.6.6.

Modelos de los Diferente tipo de Examen

En este caso no se entrara en detalle sobre los datos e informacion que se registra estos modelos
por cuestiones de que la mismas escapan del conocimiento comun de las personas, si desea saber
mas acerca de ello en la bibliograﬁa estan las documentacion de donde se modelaron los examenes.

Figura 5.6: Historia Clinica Modelos de Estudios

5.6.6.1.

BasicExam (Examen Basico)

El Modelo BasicExam Reﬂeja la informacion correspondiente a un examen ﬁsico general sin entrar
en analisis de examen de expeciales de las diferentes areas del cuerpo.
35

Cap´
ıtulo 5
5.6.6.2.

HeadExam (Examen de Cabeza)

Un Examen mas especializado de la cabeza, y el craneo en el que se analiza conjuntamente boca,
ojos, nariz, forma del craneo y oidos.
5.6.6.3.

NeckExam (Examen de cuello)

Est´ orientada a buscar cambios en la forma del cuello (adenopat´
a
ıas, bocio, lipomas, quistes o
tumores), en este caso es muy importante la ubicaci´n del aumento de volumen cervical que oriente
o
en el diagnostico.
5.6.6.4.

PFTSExam (Examen de Piel Faneras y Tejido Subcutaneo)

Este modelo esta orientado a registrar informacion correspondiente a estudio y descripci´n completa
o
de: Piel, Faneras Cut´neas, Mucosas, Tejido Celular Subcut´neo y M´sculos.
a
a
u

Figura 5.7: Historia Clinica Modelos de Estudios Continuacion
5.6.6.5.

OsteoArticularExam (Examen Osteo Articular)

El Examen Osteo Articular contempla la evaluacion de la fuerza muscular esqueletica medicion de
los miembros y movilidad Articular, en el se analizan la:
Simetria Estructural y Alineacion
Facilidad y Amplitud de Movimientos
Masa y tono Muscular
Fuerza Muscular
Apariencia de la piel sobre las articulaciones.
Dolores, crepitaciones y deformidades
36

El Proyecto
5.6.6.6.

RespiratorySystemExam (Examen del Sistema Respiratorio)

Consiste en un examen en el cual se anilzan cada una de los componentes del sistema respiratorio,
se analizan:
Torax
Sonoridad
Capacidad Pulmonar
Boca, fosas nasales, faringe, laringe y traquea
Vias Aereas
Frecuencia Respiratoria
Musculos Accesorios y Vesiculares
5.6.6.7.

CardiovascularSystemExam (Examen del Aparato Cardiovascular)

Este analisis trata de almacenar lo referente al estudio del sistema Cardiovascular el cual esta
constituido por el corazon y los vasos sanguineos (arterias, capilares y venas) el analisis permite
recoger informacion sobre:
Numero Latidos Por Minutos
Choques de Punta
R1, R2, R3 y R4
Murmullo Vesicular y Chasquidos
Pulso Carotideo
Pulso Humeral
Pulso Radial
Pulso Femoral
Pulso Popliteo
Pulso Tibial Posterior
Pulso Pedio
Observaciones Generales

37

38

Cap´
ıtulo 6

Instalacion y Conﬁguracion
En este Capitulo Aparte de guiarle para realizar una exitosa implementacion Local del Servidor de
Produccion se hara referencia a cada una de las Herramientas y librerias Utilizadas.

6.1.
6.1.1.

Requerimientos
Requerimientos de Hardware

Cualquier equipo que cumpla con las Caracteristicas para correr Windows 7 es suﬁciente en
terminos de requerimientos minimos de Hardware siempre y cuando el numero de usarios esperados
no sea alto, despues el resto dependera de sus necesidades.

Procesador x86, x64 de 1 Ghz o superior.
Memoria Ram 1 GB o Superior

6.1.2.

Requerimientos de Software

Apache 2.2
PosgreSQL 9.2
Python 2.7.x o Python 2.6.x
Django 1.3.x o Superior
PGAdmin
psycopg2
mod wsgi
ReportLab
easy thumbnails
django extensions
django cron
39

Cap´
ıtulo 6

6.2.

Apache

Existen 2 caminos para instalar Apache La Primera Hacer una instalacion Limpia de Apache, la
2da es cuando no se quiere trastear con tanta conﬁguracion por lo que opta por infraestructuras
tipo WAMP, LAMP, WAPP, etc.

6.2.1.

Instalacion en Limpio

Solo recomiendo este tipo de instalacion desde 0 para quienes ya poseen un conocimiento avanzado
en cuanto a manejo de servidores.
Descargamos de Apache.org la ultima version disponible, puedes utilizar el siguiente vinculo:
http://www.apachehaus.com/cgi-bin/download.plx.
Crea dos carpetas en la unidad C, la primera de nombre Apache y la segunda servidor. Descomprime el archivo descargado y ejec´talo, sigue los pasos de la instalaci´n y de los datos que te piden
u
o
solo escoge el destino de la instalaci´n, que ser´ la carpeta que creaste en C:\Apache , los otros
o
a
datos d´jalos de la forma predeterminada para conﬁgurarlos m´s tarde. El programa al instalarse
e
a
crea un icono en el ´rea de notiﬁcaci´n que te permitir´: iniciar, detener y reiniciar Apache; tienes
a
o
a
que tener en cuenta que cualquier cambio que hagas en el archivo de conﬁguraci´n no tendr´ efecto
o
a
hasta que reinicies el servidor.

6.2.2.

Instalacion mediante WAMP, LAMP, MAMP, WAPP

Existem una inﬁnidad de Paquetes precompilados y conﬁgurados, con Apache, PHP, PosgreSQL o
MySQL y mas. Dichas infraestructuras suelen nombrarse como el acronomico de las herramientas
que agrupan por ejemplo:

WAMP Windows Apache MySQL PHP
WAPP Windows Apache PosgreSQL PHP
LAMP Linux Apache MySQL PHP
MAMP Mac OS Apache MySQL PHP
Algunas distribuciones mas usadas disponibles Para Windows son WAMP Server http://www.
wampserver.com/ (WAMP), XAMPP http://sourceforge.net/projects/xampp/ (WAMP +
Perl), Bitnami http://bitnami.com/stack/wapp (WAPP) solo nos resta elegir cualquiera de ellas
e instalarlas, aparte de la ruta de instalacion nos pediran el usuario y contrase˜a para acceder al
n
motor de Base de Datos.

6.2.3.

Conﬁguracion

Toda la conﬁguraci´n para el funcionamiento de Apache se guarda en un archivo de texto nombrao
do: httpd.conf que se encuentra en la ruta C:\Apache \conf si realizamos una instalacion en
limpio o C:\wamp \bin \Apache \conf si instalamos el paquete multiple preconﬁgurado no
es necesario realizar este paso por lo que lo podremos salta.
Al archivo httpd.conf lo podemos editar en cualquier editor de texto como Notepad.
Buscamos la linea que dice
Listem LocalHost :80
40

Instalacion y Conﬁguracion
y la Cambiamos por:
Listem 80
Ahora buscamos la instruccion:
DocumentRoot " C :\ xxxxxxxx "
y la Cambiamos por:
DocumentRoot " C :\ Servidor "
Recordar que al inicio de la instalacion creamos una Carpeta llamada Servidor en la unidad C.
Por ultimo solo nos queda reiniciar el servidor Apache e introducir la siguiente direccion http:
//127.0.0.1 si nos aparece una pagina It’s Work! felicidades Apache esta Funcionando.

6.2.4.

Instalacion de PosgreSQL

La versi´n de PostgreSQL que he utilizado durante el desarrollo del sistema es la 9.2.x, quisas
o
cuando leas esto haya salido una nueva version la cual no deberia generar inconvenientes ademas
de que es posible que el proceso de instalaci´n pueda variar.
o
El primer paso es descargar el instalador de PostgreSQL para Windows, lo puedes descargar desde
el enlace siguiente http://www.postgresql.org/download/windows, nos bajara un instalador
similar a postgresql-9.2.3-rc1-windows.exe lo ejecutamos como administrador.
Si tenemos activado el control de cuentas de usuario nos mostrar´ una advertencia con el texto
a
”¿Desea permitir que este programa realice cambios en el equipo?”, pulsaremos ”S´
ı”para continuar
con la instalaci´n de PostgreSQL.
o
Indicaremos la carpeta de instalaci´n de PostgreSQL, donde se guardar´n los ejecutables, librer´ y
o
a
ıas
ﬁcheros de conﬁguraci´n de PostgreSQL en mi caso el directorio es C: \PosgreSQL \9.2 , Indicao
remos tambi´n la carpeta donde se guardar´n los datos por defecto de PostgreSQL C: \psql-data .
e
a
Solo nos queda introducir la contrase˜a para el superusuario ”postgres”que ser´ con el que iniciemos
n
a
sesi´n para administrar la base de datos, despues podremos crear otros usuarios si es necesario.
o
Ademas introduciremos el puerto de escucha para la conexi´n con el servidor PostgreSQL, por
o
defecto el 5432.
Seleccionaremos la conﬁguraci´n regional y comenzara la instalacion, con esto PosgreSQL quedara
o
instalado. Si tenemos alg´n cortafuegos (ﬁrewall) deberemos abrir el puerto 5432.
u

6.2.5.

Creacion de la Base de Datos

Junto con la Instalacion de PosgreSQL se instala el PGAdmin III que es una Heramienta GUI para
administrar el motor de base de Datos. Iniciamos el Programa, desplegaremos ”Server Groups”,
e
o
o
dentro desplegaremos ”Servidores dentro de ´ste pulsaremos con el bot´n derecho del rat´n sobre
”PostgreSQL 9.0 (localhost:5432), en el men´ emergente seleccionaremos Conectar”.
u
¸
Introduciremos la contrase˜a para el superusuario postgres (la contrase˜a introducida en la instan
n
laci´n).
o
Pulsaremos con el bot´n derecho del rat´n sobre ”Bases de datos”, seleccionaremos ”Nueva Base
o
o
de Datos”, en la pesta˜a ”Propiedades¨
n
ıntroduciremos los siguientes datos:
2

Nombre: nombre de la base de datos, en nuestro caso ”BDSem”.
41

Cap´
ıtulo 6
Propietario: seleccionaremos el usuario creado anteriormente ”posgres”.
Codiﬁcado: seleccionaremos UTF8.
Tablespace: seleccionaremos el tablespace creado anteriormente ”pg default”.
Colaci´n: seleccionaremos ”Spanish, Argentina”.
o
Tipo car´cter: seleccionaremos ”Spanish, Argentina”.
a
Pulsaremos OK para crear la base de datos, con esto ya tendremos nuestra base de datos aunque
vacia, el resto como creacion de las Tablas correspondientes nesesarias para el proyecto lo haremos
mas adelante mediante Django.

6.3.

Instalacion de Python

Para este proyecto se utilizo CPython pero no la version Oﬁcial urlhttp://www.python.org sino
la que distribuye Active State http://www.activestate.com llamada Active Python la cual
provee caracteristicas adicionales a version oﬁcial, podremos descargar la ultima version desde http:
//www.activestate.com/activepython/downloads aunque se recomienda instalar la version 2.7.x
para evitar cualquier posible problema.

6.3.1.

Probando Python

Para probar que la instalacion haya sido correcta abriremos la Terminal cmd.exe escribiremos:
¸
2

python
Si todo va bien nos debera aparecer algo similar a:

Figura 6.1: Ejecutando Python en la Terminal
En caso contrario deberias revisar que la ruta de Python este dentro de la variable PATH del
sistema.

42

Instalacion y Conﬁguracion

6.4.

Instalar Django

Puedes bajarte Django desde el siguiente enlace https://www.djangoproject.com/download/1.
3.7/tarball/ 1 te descargara un paquete llamado Django-1.3.7.tar.gz lo descomprimes en algun
directorio luego abres la Terminal y te posicionas sobre el directorio donde descomprimiste y ejecutas:
$ python setup . py install
Sino mediante el instalador de Paquetes de Python de manera mas automatica escribes en la
terminal
pip install django ==1.3.7
Con esto ya tendremos instalado Django.

6.5.

Instalando el Resto de Las Dependencias

Ademas de Django en el Proyecto se utilizaron otras Librerias de Python las cuales algunas vienen
instaladas y Otras Requieren ser instaladas de manera similar a como instalamos Django.

6.5.1.

psycopg2

psycopg2 es un adaptador de base de datos PostgreSQL para el lenguaje de programaci´n Python.
o
psycopg2 fue escrito con el objetivo de ser muy peque˜o y r´pido y estable.
n
a
psycopg2 es diferente del otro adaptador de base de datos, ya que fue dise˜ado para aplicaciones en
n
gran medida de subprocesos m´ltiples que crean y destruyen un mont´n de cursores y hacen que
u
o
un n´mero notable de inserciones o actualizaciones concurrentes. psycopg2 tambi´n proporcionan
u
e
operaciones asincr´nicas completos y apoyo a las bibliotecas de co-rutinas.
o
Para instalar descargue el precompilado desde http://www.stickpeople.com/projects/python/
win-psycopg/ Ejecutelo con permisos de administrador, nos pedira que selecionemos la version de
python con que se instalar.

6.5.2.

ReportLab

ReportLab es la ultra-robusto motor de c´digo abierto a prueba de tiempo para la creaci´n de
o
o
documentos PDF y gr´ﬁcos vectoriales personalizado. Escrito en Python, ReportLab es r´pido,
a
a
ﬂexible y una plataforma cruzada.
Proporciona un completo conjunto de herramientas de programaci´n para la creaci´n de documentos
o
o
y gr´ﬁcos complejos. Ofrecemos una serie de componentes de forma gratuita y de c´digo abierto,
a
o
adem´s de un paquete comercial con caracter´
a
ısticas adicionales.
Para Instalar descargue el instalado desde http://www.reportlab.com/software/installation/
y proceda de manera similar a como hizo con la instalacion de psycopg2.

6.5.3.

easy thumbnails

o
a
Easy Thumbnails es Una potente aplicaci´n thumbnailing 2 , pero f´cil de implementacion para
Django.
Para Instalar solo ejecute el siguiente comando en terminal, no Se necesita conﬁgurar nada en el
proyecto el mismo esta previamente conﬁgurado.
pip install easy - thumbnails
1 la version 1.3.7 no es la ultima version disponible a la hora de crear este informe estaba por la 1.6.2 ya que
Django se actualiza constantemente.
2 Cuando hablamos de thumbnails nos referimos a las diferentes miniaturas que son versiones en distintos tama˜ os
n
de una im´gen y son usadas para ayudar a su organizaci´n y reconocimiento.
a
o

43

Cap´
ıtulo 6

6.5.4.

django extensions

Django Extensions es una coleccion de Extensiones (utilidades) Personalizadas de diferentes autores
no relacionados con el Proyecto Django, para extender las capacidades del Framework.
Para Instalar solo ejecute el siguiente comando en terminal 3
pip install django - extensions

6.5.5.

django cron

Django-cron permite ejecutar c´digo de Django de manera recurrente para el seguimiento y
o
ejecuci´n de las tareas. En este caso no es Necesario Instalar Nada, viene junto con el Coo
digo Fuente del Proyecto. Igualmente si tiene curiosidad puede visitar la pagina del proyecto
https://github.com/Tivix/django-cron

6.5.6.

Descargar e Instalacion de mod wsgi

Asumiendo que ya tienes instalado Python y Apache, solo debes descargar el paquete libapache2mod-wsgi ,la ultima version de mod wsgi se puede descargar desde su pagina oﬁcial https:
//code.google.com/p/modwsgi/ descargaran un archivo similar a ”mod wsgi-win32-ap22py273.3.so”la version que descarguen de mod wsgi depende como se ve, de la plataforma asi como de la
version de python que correrar en el servidor. luego por cuestiones de practicidad renombraremos
el archivo de la siguiente manera:
mod_wsgi - win32 - ap22py27 -3.3. so -> mod_wsgi . so
Realizado dicho cambio copiamos el modulo dentro de la siguiente carpeta: APACHE FOLDER
\modules \APACHE FOLDER vendria a ser el directorio donde tenemos la instalacion de WAMP
en mi caso es: C:\Apache.

6.5.7.

Cargando el Modulo en Apache

Una vez que el m´dulo de Apache ha sido instalado en el directorio de m´dulos de su instalaci´n
o
o
o
de Apache, todav´ es necesario conﬁgurar Apache para cargar el m´dulo en realidad.
ıa
o
Abrimos el archivo ”httpd.conf agregamos la siguiente linea en el mismo punto donde se cargan el
resto de los modulos. 4
2

LoadModule wsgi_module modules / mod_wsgi . so
Con todo esto echo solo tenemos que reiniciar el servidor Apache, en nuestro caso clic en el icono
en la barra de notiﬁcaciones luego las opciones Apache-¿Service-¿Reiniciar Servicio.

6.6.

Conﬁguracion del Proyecto

Bueno Ahora solo tenemos que crear un alias en Apache
en mi caso la carpeta destino sera:

5

para nuestra carpeta donde colocaremos

C :\ Servidor \ SGCM
SGCM es la carpeta contenedora del proyecto, y el alias que usaremos sera:
3 Importante, no todas las funcionalidades estan soportadas en Windows, pero en cuanto al proyecto no hay
problemas.
4 El archivo httpd.conf esta en la siguiente ruta en el caso de mi instalacion: C:\Apache \conf \httpd.conf
5 Para mayor informacion de como crear alias en Apache consulte http://httpd.apache.org/docs/2.2/
urlmapping.html

44

Instalacion y Conﬁguracion
/ sgcm /
tendremos que agregar las siguientes lineas al ﬁnal del archivo httpd.conf de apache.
Alias / sgcm / " C :/ Servidor / SGCM /"
WSGIScriptAlias / sgcm " C :/ Servidor / SGCM / handle . wsgi "
< Directory " C :/ Servidor / SGCM " >
Options Indexes FollowSymLinks MultiViews
AllowOverride all
Order allow , deny
Allow from all
</ Directory >

Hay un n´mero de maneras en que una aplicaci´n WSGI organizada por mod wsgi 6 puede montarse
u
o
contra una URL espec´
ıﬁca. Estos m´todos son similares a c´mo se podr´ conﬁgurar las aplicaciones
e
o
ıa
CGI tradicionales.
El principal enfoque implica declarar expl´
ıcitamente en el archivo de conﬁguraci´n principal de
o
Apache el punto de montaje URL y una referencia al archivo de comandos de aplicaciones WSGI.
En este caso, el mapeo se ﬁja, con cambios s´lo ser capaz de ser hecho mediante la modiﬁcaci´n de
o
o
la conﬁguraci´n principal de Apache y reiniciar Apache.
o
Al utilizar mod cgi para alojar aplicaciones CGI, esto se har´ mediante la directiva ScriptAlias.
ıa
Para mod wsgi, la directiva en su lugar se llama WSGIScriptAlias.
WSGIScriptAlias / wsgi " C :/ Servidor / SGCM / handle . wsgi "
Esta directiva s´lo puede aparecer en los principales archivos de conﬁguraci´n de Apache. La dio
o
rectiva se puede utilizar en el ´mbito del servidor, pero normalmente se coloca en el contenedor
a
VirtualHost para un sitio en particular. No se puede utilizar en cualquiera de las directivas de contenedores ubicaci´n, directorios o archivos, ni puede ser utilizada dentro de un archivo ”.httaccess”.
o
El primer argumento de la directiva WSGIScriptAlias debe ser el punto de montaje URL para la
aplicaci´n WSGI. En este caso, la URL no debe contener una barra diagonal. La unica excepci´n a
o
´
o
esto es si la aplicaci´n WSGI es para ser montado en la ra´ del servidor web, en cuyo caso / ser´
o
ız
ıa
utilizado.
El segundo argumento de la directiva WSGIScriptAlias debe ser una ruta absoluta para el archivo
de comandos de aplicaciones WSGI. Es en este archivo que la muestra de c´digo de la aplicaci´n
o
o
WSGI debe colocarse.
Tenga en cuenta que una ruta absoluta debe ser utilizado para el archivo de comandos de aplicaciones WSGI suministrado como segundo argumento. No es posible especiﬁcar una aplicaci´n
o
por s´ sola Python nombre de m´dulo. Una ruta de acceso completa se utiliza para una serie de
ı
o
razones, la principal de las cuales por lo que todos los controles de acceso de Apache todav´ pueden
ıa
aplicarse para indicar que en realidad puede acceder a la aplicaci´n WSGI.
o
Porque se aplicar´n los controles de acceso de Apache, si la aplicaci´n WSGI se encuentra fuera de
a
o
los directorios que ya est´n conﬁgurados para ser accesible a Apache, habr´ que decirle a Apache
a
a
que los archivos dentro de ese directorio se pueden utilizar. Para ello se debe utilizar la directiva
Directory.
Hasta aqui tenemos mod wsgi y nuestro directorio listo, ahora probaremos que todo va bien para ello
dentro del directorio crearemos un archivo llamado ”handle.wsgi”que tendra el siguiente contenido:
1
2
3
4
5

# -* - coding : utf -8 -* import os , sys
import django . core . handlers . wsgi
6 Puede consultar https://code.google.com/p/modwsgi/wiki/QuickInstallationGuide si desea explorar otras
opciones de conﬁguracion.

45

Cap´
ıtulo 6
6
7
8
9
10
11

sys . path . append ( ’C :/ Servidor / SGCM ’)
sys . path . append ( ’C :/ Servidor ’)
os . environ [ ’ D JA NG O_ SET TI NG S_M OD UL E ’] = ’ settings ’
application = django . core . handlers . wsgi . WSGIHandler ()

Con esto nuestro servidor de aplicacion ya deberia funcionar aunque como veran no se cargan los
archivos estaticos como imagenes y hojas de estilo por lo que necesitamos agregarlo.
Django no deber´ ser utilizado para servir archivos multimedia (im´gen, audio, video, ﬂash) por
ıa
a
s´ mismo; mejor deja ese trabajo al servidor web que hayas elegido. Recomendamos usar un servidor
ı
Web separado (es decir, uno que no est´ corriendo a la vez Django) para servir estos archivos.
a
Sin embargo, si no tienes opci´n para servir los archivos multimedia que no sea el mismo VirtualHost
o
Apache que usa Django, aqu´ te mostramos como desactivar mod python para una parte particular
ı
del sitio agregando el siguiente informacion a http.conf:
< Location "/ media /" >
SetHandler None
</ Location >
Cambia Location a la URL raiz donde se encuentran tus archivos.
Tambien puedes usar ¡LocationMatch¿ para comparar con una expresi´n regular. Por ejemplo, esto
o
conﬁgura Django en la raiz del sitio pero deshabilitando Django para el subdirectorio media y
cualquier URL que termine en .jpg, .gif, o .png:
< Location "/" >
SetHandler python - program
PythonHandler django . core . handlers . modpython
SetEnv D J A N G O _ S E T T I N G S _ M O D U L E mysite . settings
</ Location >
< Location "/ media /" >
SetHandler None
</ Location >
< LocationMatch "\.( jpg | gif | png ) $ " >
SetHandler None
</ LocationMatch >
En todos estos casos, necesitar´s conﬁgurar la directiva DocumentRoot para que Apache sepa
a
d´nde encontrar tus archivos est´ticos.
o
a
Con esto Django estara funcionando correctamente, y podra cargar imagenes y demas ﬁcheros
necesarios.

6.7.

Conﬁguracion Inicial

Ahora que tenemos todo instalado y funcionando, debemos crear la conﬁguracion inicial necesaria
para que la aplicacion pueda funcionar ya que si intentamos acceder en este momento a la aplicacion
nos devolvera una serie de errores, por faltar informacion, entre ellas que todavia no se crearon las
tablas necesarias para soportar el modelo y los datos de los mismos.
Enpecemos creando las tablas necesarias, se supone que la base de datos ya esta creada y su
nombre agregado en el archivo setings.py osea suponemos que hicimos todos los pasos necesarios
para conectar la base de datos y demas bueno en la ruta donde localizamos el proyecto ejecutamos
el siguiente comando desde terminal:
46

Instalacion y Conﬁguracion
$ python manage . py syncdb
Esta instruccion le dice a Django que sincronize los modelos con la base de datos y que cree las
tablas necesarias en la misma para que esto funcione, ademas no preguntara si deseamos crear una
cuenta para el administrador debemos decir si, y proporcionar el nombre de la misma, el cual por
requerimento el nombre del usuario administrador debe ser admin, este requerimiento es necesario
para luego lanzar e implementar la conﬁguracion inicial.
Con las tablas creadas y el usuario admin creados, procedemos a crear la informacion necesaria
para el funcionamiento de la aplicacion, para ello ejecutaremos el siguiente script:
$ python init_app . py
El mismo creara toda la informacion requeridad por la aplicacion y con ello quedara nuestro servidor en funcionamiento, solo hara falta reiniciar Apache. Con esto concluye todo lo referente a
conﬁguracion del servidor.

47

48

Cap´
ıtulo 7

Guia de Referencia
El sistema en si es bastante intuitivo en cuanto a su funcionamiento igual aqui resumo un poco el
funcionamiento y algunas de las diferentes sessiones de de la Aplicacion.

7.1.

Organizacion de la Aplicacion

La aplicacion se organiza de la siguiente manera, con las diferentes sessiones bien deﬁnidas:
1 Menu Principal
2 Menu Secundario
3 Cuerpo de la Aplicacion
4 Informacion de Usuario

Figura 7.1: Organizacion Espacial del contenido de la aplicacion
49

Cap´
ıtulo 7

7.1.1.

Menu Principal

El contenido del menu principal depende del tipo de usuario que haya iniciado session en base a
ello tendra o no habilitadas diferentes funcionalidades de la aplicacion, los unico menus comuneos
son Mensajes y Opciones.

7.1.2.

Menu Secundario

El menu secundario dependiendo de la vista donde se este, puede o no existir, y su contenido
dependera del las acciones que pueden ser realizadas en ella.

7.1.3.

Cuerpo de la Aplicacion

Aqui se localizara el contenido principal de la vista, ya sea un formulario para registrar alguna
informacion, una lista para mostrar informacion etc.

7.1.4.

Informacion de Usuario

Muesta informacion acerca de la session actual que se esta usando, tal informacion es el nombre del
usuario 1 y el tipo de usuario que puede ser (Paciente, Medico, Administrativo,Not Login en caso
de no haber iniciado session)

7.2.

Panel de Usuario No Registrado

Corresponde al panel que vera el usuario la primera ves que ingrese a la aplicacion las funciones
que se pueden hacer son restringidas y se limitan a:
Inicio: Ir a la pantalla de Inicio
Listado de Medicos: Mostrar informacion basica acerca de los expecialistas con los que
cuenta la institucion.
Registrarse: Permite al usuario mediante una serie de pasos registrarse como paciente.
Iniciar Session: Iniciar una session con un usuario registrado.
En cuanto la la vista Inicio es solo la pantalla principal de presentacion de la aplicacion con un
logo de fondo.
La vista Listado de Medicos puede consultarla en la session del Panel del Paciente, ya que
la unica diferencia considerable es que se agregan un par de opciones que permiten al Paciente
realizar algunas acciones a diferencia del usuario no registrado que solo puede visualizar parte de
la informacion.

7.2.1.

Registrarse

Esta vista ofrece a los usuarios no registrados, un formulario donde deberan cargar una serie de
datos para registrarse como pacientes.
1 nombre

50

real, no el usename

Guia de Referencia

Figura 7.2: Formulario Registro Paciente

Completado el registro y luego de enviado el formulario, si todos los datos son correctos nos mostrara
un mensaje de que el registro fue exitoso:

Figura 7.3: Formulario Registro Paciente

Paso siguiente deveremos revisar nuestra casilla de correo donde nos aparecera el mensaje con la
direccion del formulario para activacion de usuario. 2 .

2 Si

se intenta iniciar session sin haber activado el usuario nos devolvera un mensaje de error.

51

Cap´
ıtulo 7

Figura 7.4: Bandeja de Correo con el mensaje

Figura 7.5: Cuerpo del mensaje con la informacion de activacion de usuario

Figura 7.6: Formulario de Activacion de usuario
52

Guia de Referencia
Luego de estos pasos el usuario estara registrado y activado, solo faltaria iniciar session para poder
empezar a operar como paciente.

7.2.2.

Iniciar Session

La vista de inicio de session no es nada de otro mundo, solo es un simple formulario donde debes
introducir el usuario y contrase˜a validos para poder iniciar session.
n

7.3.

Panel de Usuario Paciente

Corresponde al panel de funciones al que tendran acceso los usuarios, pacientes sigue siendo limitado
pero ya se pueden hacer algunas cosas como solicitar turnos y realizar consultas medicas rapidas a
un expecialista, se organiza en:

Inicio: Ir a la pantalla de Inicio
Listado de Medicos: Mostrar informacion acerca de los expecialistas.
Mensajes: Casilla de Mensajes Internos.
Mis Turnos: Informacion acerca del estado de los turnos del usuario.
Opciones: Panel de Opciones

7.3.1.

Listado de Medicos

Vista que permite seleccionar entre el listado de expecialistas que componen el cuerpo medico de
la intitucion consultar informacion, realizar una consulta rapidas y solicitar turno.

Figura 7.7: Listado de Medicos
53

Cap´
ıtulo 7

Figura 7.8: Formulario de Consulta Online

Figura 7.9: Mostrar Datos del Medico
La vista de Asignacion de turno son similares, entre si no varian mucho por lo que se explicara en
la parte del panel de Medico.

7.3.2.

Mensajes

Como ya se menciono esto es una session comun a todas los usuarios, se trata de un conjunto
de vista donde funciona el sistema de mensajeria interna entre los usuarios de la aplicacion, su
funcion esta reducida en cuanto al usuario paciente ya que este solo puede visualizar y responder
los mensajes que se le envian, para enviar un mensaje a un profecional se realiza mediante la opcion
54

Guia de Referencia
de Realizar Consulta Online, por lo que solo puede enviar mensaje a los expecialistas, las Opciones
disponible son:

Redactar: Escribir un Nuevo Mensaje

Recibidos: Bandeja de Entrada

Enviado: Bandeja de Salida

Algunas de las cuales pueden ser apreciadas en las siguientes capturas:

Figura 7.10: Redactar un Mensaje

Figura 7.11: Bandeja de Entrada
55

Cap´
ıtulo 7

Figura 7.12: Mostrar Mensaje

7.3.3.

Opciones

Otro menu comun a todo los usuarios permite la administracion de los datos e informacion del
mismo, dentro de las funciones que permite este menu se encuentra:
Mis Datos: Mostrar/Modiﬁcar Datos personales
Camibar Contrase˜ a: Formulario para cambio de Contrase˜a
n
n
Cerrar Session: Cerrar Session, despedirse del sistema.

7.4.

Panel de Usuario Administrativo

Corresponde al panel de funciones al que tendran acceso los usuarios Administrativos
Inicio: Ir a la pantalla de Inicio
Pacientes: Administrar Usuarios Pacientes
Medicos: Administrar Usuarios Medicos
Administrativos: Administrar Usuarios Administrativos
Expecialidades: Administrar Expecialidades Medicas
Mensajes: Casilla de Mensajes Internos.
Opciones: Panel de Opciones
56

Guia de Referencia

7.4.1.

Pacientes, Medicos, Administrativos

Los tres conjuntos de vistas comparten muchas caracteristicas similares por lo que se explican en
conjunto y solo se mencionaran algunas de sus diferencias, cada sub menu se enlista de acuerdo
a los tipos de usuarios que se desea administrar, permitiendo segun el sub menu la posibilidad de
crear un tipo de usuario especiﬁco 3 Buscar un usuario, modifar sus datos.

Figura 7.13: Mostrar Administrativo

Figura 7.14: Vista para busqueda de usuario, en este caso usuarios Pacientes
En el caso de los usuarios medicos ademas puede consultar y modiﬁcar el estado de los turnos que
les fueron solicitados, deﬁnirles expecialidades correspondiente.
3 Los Usuarios registrados por el Administrador o el Medico no requieren activacion como los usuarios creados por
usuarios no registrados.

57

Cap´
ıtulo 7

Figura 7.15: Mostrar Medico

Figura 7.16: Vista Listado Turnos Solicitados al Medico.

En los pacientes ademas puede asignar un turno a los mismo, cancelar un turno solicitado por el
mismo, mostrar informacion e impribir comprobante correspondiente.
58

Guia de Referencia

Figura 7.17: Mostrar Paciente

7.5.

Panel de Usuario Medicos

Corresponde al panel de funciones al que tendran acceso los usuarios ...
Inicio: Ir a la pantalla de Inicio
Cronograma:
Pacientes:
Turnos:
Mensajes: Casilla de Mensajes Internos.
Opciones: Panel de Opciones

59

60

Cap´
ıtulo 8

Conclusion y Mejoras
8.1.

Resultado

El Sistemas de Gestion de Consultorios Medico proporciona soporte para Gestion de Turnso para
pacientes y medicos proveyendo una nueva manera de mejorar la comunicacion entre el paciente y
el medico atraves de Internet, Permite administrar las Historias Clinicas dejando de depender de
archivos ﬁsicos y con la posibilidad de almacenar los mismos en la nube.
Considero que se alcanzaron casi todos los objectivos planteados y otros no planteados en la etapa
inicial.

8.1.1.

Ventajas Percibidas

Las Ventajas y Desventajas en lo que respeta al sistema fueron expuestas en el Capitulo IV cuando se
realizo una comparacion con el actual sistemas, aqui se analizan las relacionadas a las herramientas
que se utilizaron en su desarrollo.
La primera ventaja que encontre fue la velocidad de desarrollo comparando con otras herramientas aunque Python no es un 4GL sino un 3GL la facilidad de entendiemiento de su
sintaxis hace que el codigo sea facilmente entendible y legible lo que permite un mantenimiento sencillo, el codigo en python se asemeja mucho a lo que hacemos cuando escribimos
un algoritmo en el papel por lo que la curva de aprendizaje si ya manejas algun lenguaje es
minima, aprendi python en 5 dias.
Django y el Modelo de desarrollo MVC (Modelo Vista Controlador) aportaron otro extra a
la velocidad de desarrollo del sistema ya que solo con un par de lineas era capas de crear
vistas facilmente adaptables, ademas de la caracteristica de poder heredar plantillas por lo
que en caso que quisiera realizar un cambio en el dise˜o de la plantilla solo requeria cambiar la
n
plantilla maestra o base sin necesidad de estar modiﬁcando una por una todas las plantillas,
ni hablar si el codigo hubiese estado mesclado con el HTML como ocurre aveses con PHP por
ejemplo.
Otra caracteristica interesante de Django que me ahorro sufrimiento fue la deﬁnicion de
Modelos, cuando trabajas con Django no hace falta conocer el motor de Base de Datos y su
sintaxis, no te debes preocupar por aprender como realizar tal o cual consulta, dejas de pelear
con los JOIN de SQL y demas, solo te dedicas a aprender a manejar el ObjectRelationalModel
o ORM que forma parte de Django el cual es sencillo de aprender.
Aunque no esta relacionado en si con el desarrollo de manera explicita agradesco haber conocido sitios como urlhttp://www.stackoverﬂow.com que es un sitio colaborativo donde podes
61

Cap´
ıtulo 8
hacer preguntas y/o responderlas sobre cuestiones de programacion, instalaciones, errores,
etc. Fue una gran ayuda ya que pude solucionar gracias a eso muchas de las diﬁcultades y
entender el problema de las mismas de manera rapida.
Aprender a usar un sistema de control de versiones para el codigo fuente como GIT de mi
proyecto fue de gran utilidad ya que el desarrollo de esta aplicacion no fue de manera continua
sino que variada durante todo el tiempo de desarrollo.

8.1.2.

Desventajas Percibidas

No todo el desarrollo fue como se esperaba, surgieron una serie de inconvenientes o limitaciones
relacionadas con la herramienta.
Hacer Deploy 1 con la herramienta no es tan facil como cuando instalas LAMP, pierdes mucho
tiempo intentando conﬁgurar el servidor, la documentacion existente sobre la misma es muy
poca y normalmente incompleta.
En su mayoria la documentacion sobre las librerias y demas herramientas se encuentra escrita
en ingles, no lo consideraria en si una desventaja pero lo menciono en este apartado por mi
bajo nivel en lo que respecta a lectura y comprension de texto en ingles.

8.2.

Futuras Mejoras

El sistema podria evolucionar de varias maneras, al ser ul sitema dise˜ado mediante plantillas
n
la principal evolucion del mismo es que se podria adaptar las interfaces a los navegadores de los
dispositivos moviles inteligentes.
Otra mejora comun al sistema, seria que pueda integrarse con otros estudios como poder registrar
analisis de laboratorio, odontogramas, integracion con el sistema vademecun para que sea mas
sencillo elaborar una receta medica, y la posibilidad de importar y/o exportar la historia clinica a
formatos conocidos como archivos PDF para permitir ser exportado a papel.

1 Implementar

62

un Servidor de Produccion con Apache, Python, Django y PosgreSQl mod wsgi

Bibliograf´
ıa
[1] Wikipedia Servidor HTTP Apache
http://es.wikipedia.org/wiki/Servidor HTTP Apache
[2] Servidor Apache en Ubuntu
http://kuyne.blogspot.com.ar/2013/03/servidor-apache-en-ubuntu-instalacion-y.html
[3] Servidor Apache en Windows
http://norﬁpc.com/internet/instalar-servidor-apache.html
[4] Wikipedia El Modelo Vista Controlador
http://es.wikipedia.org/wiki/Modelo Vista Controlador
´
´
´
´ ıaz
´
[5] Rogelio Leon Lopez, Barbara Gallego Machado y Jose D´ Novas Formato recomendable para llenar la hoja de remisi´n m´dica de un paciente
o
e
http://bvs.sld.cu/revistas/mgi/vol22 2 06/mgi10206.htm
[6] Sistema Consultorio Web Registro Consulta
https://www.consultorioweb.com/intranet/doctor/pacienteConsultas.aspx
[7] PRACTICA FINAL OBLIGATORIA: INTERNADO ROTATORIO Y PASANTIA
RURAL OBLIGATORIA Modelo Historia Clinica
http://www.med.unne.edu.ar/internado/his cli.pdf
[8] Any Flowers Modelo Historia Clinica
http://www.slideshare.net/AnyFlowers/ejemplo-historia-clinica
[9] Biocom Formato de Historia Clinica
http://www.biocom.com/informatica medica/historia 5 examen ﬁsico.html
[10] Infomed Red de Salud de Cuba Examen Fisico Regional
http://www.sld.cu/galerias/pdf/sitios/pdguanabo/cap04.pdf
[11] ESMAS Problemas Auditivos Comunes
http://www.esmas.com/salud/enfermedades/notransmisibles/368755.html
[12] Wikipedia Perdida de Audicion
http://es.wikipedia.org/wiki/P %C3 %A9rdida de audici %C3 %B3n

´
[13] Hernado Vargas Vasquez Rinologia
http://sisbib.unmsm.edu.pe/BibVirtualdata/libros/Medicina/cirugia/Tomo V/archivos %20PDF/7Rinologi
[14] Wikipedia Examen Labios
http://es.wikipedia.org/wiki/Labio
[15] Consumoteca Qu´ partes deben tener y datos incluir por ley las recetas m´dicas
e
e
http://www.consumoteca.com/bienestar-y-salud/medicamentos/que-partes-deben-tener-ydatos-incluir-por-ley-las-recetas-medicas/
63

Cap´
ıtulo 8
[16] Wikipedia Vias de Administracion de Farmacos
http://es.wikipedia.org/wiki/V %C3 %ADas de administraci %C3 %B3n de f %C3 %A1rmacos
[17] Pontificia Universidad Catolica de Chile - Escuela de Medicina Respiracion
http://escuela.med.puc.cl/Publ/ManualSemiologia/190Respiracion.htm
[18] Biocom Historia Clinica - Examen Fisico
http://www.biocom.com/informatica medica/historia 5 examen ﬁsico.html
[19] Examen Fisico del Sistema Ostiomioarticular
http://www.slideshare.net/wendy1971/examen-ﬁsico-del-sistema-ostiomioarticular
[20] ModWsgi Guia de Conﬁguracion
https://code.google.com/p/modwsgi/wiki/QuickConﬁgurationGuide
[21] WSGI Guia de Referencia WSGI - EN
http://wsgi.readthedocs.org/en/latest/
[22] Apache URL Mapping
http://httpd.apache.org/docs/2.2/urlmapping.html
[23] Ministerio de Salud Formato de Historia Clinica
http://msal.gov.ar/ENT/SRV/Materiales Paciente/Herramientas Utiles/Historia Clinica/Historia Clinica.aspx
[24] Historia Clinica que es
http://es.wikipedia.org/wiki/Historia cl %C3 %ADnica
[25] Sem´
ıologia Clinica
http://es.wikipedia.org/wiki/Semiolog %C3 %ADa cl %C3 %ADnica
[26] Ley 26.529 Normativa sobre el Manejo de Historia Clinica
http://www.msaludjujuy.gov.ar/Re2014/Archi Varios %5Cley 26529.pdf

64

